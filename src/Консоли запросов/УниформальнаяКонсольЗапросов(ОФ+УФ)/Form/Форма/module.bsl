
//Перем мИмяФайла;                        // имя файла запросов
//Перем мИмяПути;                         // путь к файлу запросов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезЗапроса;                      // результат 

Перем мФормаПараметров;                 // форма параметров

Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
Перем мТаблицыЗапроса;					// для просмотра временных таблиц
Перем мИмяФайлаБэкапаЗапросов;			// для бэкапа запросов перед выполнением
Перем мСправкаИнициализирована;
Перем мСтруктураТЗПараметров;			// для быстрого создания таблицы параметров
Перем мТаблицаОписанияДерева;			// для удобства работы с деревом значений

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает текст запроса из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(СВыделением = Ложь)
	
	Если Не СВыделением ИЛИ Не ИспользоватьТолькоВыделеннуюОбласть Тогда
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;
	
    ТекстЗап = ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст();
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)

	Если ПустаяСтрока(Текст) Тогда
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст("");
	Иначе
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
	КонецЕсли;

КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура вУстановитьЗаголовокФормы()
	
	Если ИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + ИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()

	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		мТекущаяСтрока.ТекстЗапроса = вПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ПараметрыЗапроса.Очистить();
		Для каждого параметр ИЗ мФормаПараметров.ПараметрыТаблица Цикл
			новСтрока = мТекущаяСтрока.ПараметрыЗапроса.Добавить();
			новСтрока.ИмяПараметра = параметр.ИмяПараметра;
			новСтрока.ЗначениеПараметра = параметр.ЗначениеПараметра;
			Если параметр.Тип = "Таблица" Тогда
				новСтрока.ЗначениеПараметра = параметр.ДанныеЗначения;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()

	ДеревоЗапросов.Строки.Очистить();
	вЗадатьТекстЗапроса("");
	мФормаПараметров.ПараметрыТаблица.Очистить();

КонецПроцедуры // ОчиститьЗначения()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево)

	НовоеДерево.Строки.Очистить();

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл

		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Запрос 			= СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса 	= СтрокаДерева.ТекстЗапроса;
		НоваяСтрока.ПараметрыЗапроса = мСтруктураТЗПараметров.СкопироватьКолонки();
		Если ТипЗнч(СтрокаДерева.ПараметрыЗапроса) = Тип("ТаблицаЗначений") Тогда
			имяКолонкиЗначения = "ЗначениеПараметра";
			Если СтрокаДерева.ПараметрыЗапроса.Колонки.Найти("ЗначениеПараметра")=Неопределено Тогда
				имяКолонкиЗначения = "Значение";
			КонецЕсли;
			Для каждого строкаПараметра Из СтрокаДерева.ПараметрыЗапроса Цикл
				новПараметр = НоваяСтрока.ПараметрыЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(новПараметр,строкаПараметра);
				значПараметра = строкаПараметра[имяКолонкиЗначения];
				новПараметр.ЗначениеПараметра = значПараметра;
			КонецЦикла;
		КонецЕсли;

		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура вСоздатьНовыйФайлЗапросов()

	ИмяФайла = "";
	ИмяПути = "";
	моСохранитьИмяФайла();

	вОчиститьЗначения();
	вУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;

	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	мТекущаяСтрока.ПараметрыЗапроса = мСтруктураТЗПараметров.СкопироватьКолонки();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьЗапросыИзФайла()

	//Проверим существование файла.
	ФайлЗначения = Новый Файл(ИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(ИмяФайла), Неопределено);

	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда

		вОчиститьЗначения();
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			НовСтрока[0] = СтрокаВремТаблицы[0]; // Запрос
			НовСтрока[1] = СтрокаВремТаблицы[1]; // ТекстЗапроса
			НовСтрока[2] = СтрокаВремТаблицы[2]; // ПараметрыЗапроса
		КонецЦикла;
		Модифицированность = Ложь;

	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда

		вОчиститьЗначения();
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов);
		Модифицированность = Ложь;

	Иначе // Формат файла не опознан
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
					   |Выберите другой файл.");

	КонецЕсли;

	вУстановитьЗаголовокФормы();

	Если ДеревоЗапросов.Строки.Количество()>0 Тогда
		ЭлементыФормы.ДеревоЗапросов.Развернуть(ДеревоЗапросов.Строки[0]);
	КонецЕсли;

КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)

	вСохранитьЗапросТекущейСтроки();

	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(ИмяФайла) или ЗапрашиватьИмяФайла Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

		Длг.ПолноеИмяФайла = ИмяФайла;
		Длг.Каталог = ИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайла = Длг.ПолноеИмяФайла;
			ИмяПути = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	ЗначениеВФайл(ИмяФайла, ДеревоЗапросов);
	Модифицированность = Ложь;
	моСохранитьИмяФайла();
	вУстановитьЗаголовокФормы();

	Возврат Истина;

КонецФункции // СохранитьЗапросыВФайл()

// Загружает результат запроса в таблицу
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьРезультат()
	
	Если мРезЗапроса = Неопределено ИЛИ мТаблицаЗагружена = Истина Тогда
		Возврат;
	КонецЕсли;	

	РезультатТаблица = Новый ТаблицаЗначений;
	РезультатДерево = Новый ДеревоЗначений;
	мТаблицаОписанияДерева.Очистить();
	ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
	этоДерево = Ложь;
	Если ТипЗнч(мРезЗапроса) = Тип("Массив") Тогда  					//Выполнить пакет
		тзРезультат = Новый ТаблицаЗначений;
		Если мТаблицыЗапроса.Количество() = 0 Тогда
			тзРезультат.Колонки.Добавить("РезультатЗапроса",Новый ОписаниеТипов("ТаблицаЗначений"));
			Для каждого ЭлемМассива Из мРезЗапроса Цикл
				НовСтрока = тзРезультат.Добавить();
				Если ЭлемМассива<>Неопределено Тогда
					тзЭлемент = ЭлемМассива.Выгрузить();
					НовСтрока.РезультатЗапроса = тзЭлемент;
				Иначе
					НовСтрока.РезультатЗапроса = Неопределено;
               	КонецЕсли;
			КонецЦикла;
		Иначе                                                           //Просмотр ВТ
			тзРезультат.Колонки.Добавить("РезультатЗапроса",Новый ОписаниеТипов("ТаблицаЗначений"));
			тзРезультат.Колонки.Добавить("НаименованиеТаблицы",,"Наименование таблицы");
			Для каждого строкаТЗ ИЗ мТаблицыЗапроса Цикл
				НовСтрока = тзРезультат.Добавить();
				тзЭлемент = мРезЗапроса[строкаТЗ.ИндексВРезультате].Выгрузить();
				НовСтрока.РезультатЗапроса = тзЭлемент;
				НовСтрока.НаименованиеТаблицы = строкаТЗ.ИмяТаблицы;
			КонецЦикла;
		КонецЕсли;
		
		РезультатТаблица = тзРезультат;
	Иначе                                                               //Выполнить запрос
		этоДерево = ПроверитьВозможностьВыводаДерева();
		Если этоДерево Тогда
			СоздатьОписаниеДерева(РезультатДерево);	
		Иначе
			РезультатТаблица = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;
	КонецЕсли;
	
	Если Не этоДерево Тогда
		ОбработатьТЗПередВыводом(РезультатТаблица);
		
		ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатТаблица";
		ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();

	Иначе		
		ОбработатьДЗПередВыводом(РезультатДерево);
		ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатДерево";
		ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
		//Для каждого строкаДерева Из РезультатДерево.Строки Цикл
		//	ЭлементыФормы.ТаблицаРезультата.Развернуть(строкаДерева,Ложь);
		//КонецЦикла;

	КонецЕсли;
	
	индКолонки = ЭлементыФормы.ТаблицаРезультата.Колонки.Количество()-1;
	Пока индКолонки>=0 Цикл
		колонкаТЗ = ЭлементыФормы.ТаблицаРезультата.Колонки[индКолонки];
		Если Найти(колонкаТЗ.Имя,"__СлужебныйРасшифровка__")<>0 Тогда
			ЭлементыФормы.ТаблицаРезультата.Колонки.Удалить(колонкаТЗ);
		КонецЕсли;
		индКолонки = индКолонки - 1;
	КонецЦикла;
		
	мТаблицаЗагружена = Истина;
		
КонецПроцедуры // ЗагрузитьРезультат()

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)

	ЗаполнитьЗначенияСвойств(ДобСтрока,ТекСтрока);
	
	ДобСтрока.ПараметрыЗапроса = ТекСтрока.ПараметрыЗапроса.СкопироватьКолонки();
	Для каждого строкаПараметр Из ТекСтрока.ПараметрыЗапроса Цикл
		новПараметр = ДобСтрока.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(новПараметр,строкаПараметр);
		значПараметра = строкаПараметр.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("ТаблицаЗначений") Тогда		
			новПараметр.ЗначениеПараметра = значПараметра.Скопировать();	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока, Дерево);
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура вОбработкаАвтосохранения()

	Если ИспользоватьАвтосохранение И ИнтервалАвтосохранения>0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикАвтосохранения", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикАвтосохранения");
	КонецЕсли;

КонецПроцедуры // ОбработкаАвтосохранения()

Процедура вОбработкаБэкапаЗапросов()
	Если ИспользоватьБэкапЗапросов Тогда
		файлБэкапа = Новый Файл(мИмяФайлаБэкапаЗапросов);
		Если файлБэкапа.Существует() Тогда
			ДеревоЗапросов = ЗначениеИзФайла(мИмяФайлаБэкапаЗапросов);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура вБэкапЗапросаПередВыполнением()
	Если ИспользоватьБэкапЗапросов И Модифицированность Тогда
		ЗначениеВФайл(мИмяФайлаБэкапаЗапросов,ДеревоЗапросов);	
	КонецЕсли;
КонецПроцедуры

Процедура вОчисткаБэкапаЗапросаПослеВыполнения()
	Если ИспользоватьБэкапЗапросов И Модифицированность Тогда
		УдалитьФайлы(мИмяФайлаБэкапаЗапросов);
	КонецЕсли;		
КонецПроцедуры

Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.Родитель;
    КонецЦикла;

    Возврат Истина;

КонецФункции

Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.Строки.Добавить();
    Иначе
        НоваяСтрока = Приемник.Строки.Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.Строки.Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.Строки[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.Родитель = Неопределено Тогда
        РеквизитДерево.Строки.Удалить(Источник);
    Иначе
        Источник.Родитель.Строки.Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

Функция ОбрезатьСообщениеОбОшибке(сообщение)
	резСообщение = сообщение;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;

	Возврат резСообщение;
КонецФункции

Функция ПолучитьТекстПараметра(пЗначениеПараметра)
	
	типПараметра = ТипЗнч(пЗначениеПараметра);
	
	текстПараметр = "";
	Если типПараметра = Тип("Строка") Тогда
		текстПараметр = пЗначениеПараметра;
	ИначеЕсли типПараметра = Тип("Число") Тогда
		текстПараметр = Формат(пЗначениеПараметра,"ЧГ=0");
	ИначеЕсли типПараметра = Тип("Булево") Тогда
		текстПараметр = Формат(пЗначениеПараметра,"ДФ=yyyyMMdd; БЛ=Ложь; БИ=Истина");
	ИначеЕсли типПараметра = Тип("Дата") Тогда
		текстПараметр = "Дата("""+Формат(пЗначениеПараметра,"ДФ=yyyyMMdd")+""")";
	ИначеЕсли пЗначениеПараметра = Неопределено Тогда
		текстПараметр = "Неопределено";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(текстПараметр) Тогда Возврат текстПараметр; КонецЕсли;  	//для примитивных типов
	
	тзМенеджеры = Новый ТаблицаЗначений;
	тзМенеджеры.Колонки.Добавить("Менеджер");
	тзМенеджеры.Колонки.Добавить("ИмяМенеджера");
	тзМенеджеры.Колонки.Добавить("ЕстьНомер");
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Справочники;
	новСтрока.ИмяМенеджера = "Справочники";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Документы;
	новСтрока.ИмяМенеджера = "Документы";
	новСтрока.ЕстьНомер = Истина;	
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = БизнесПроцессы;
	новСтрока.ИмяМенеджера = "БизнесПроцессы";
	новСтрока.ЕстьНомер = Истина;	
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Задачи;
	новСтрока.ИмяМенеджера = "Задачи";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();	
	новСтрока.Менеджер = ПланыВидовРасчета;
	новСтрока.ИмяМенеджера = "ПланыВидовРасчета";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовХарактеристик;
	новСтрока.ИмяМенеджера = "ПланыВидовХарактеристик";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыСчетов;
	новСтрока.ИмяМенеджера = "ПланыСчетов";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыОбмена;
	новСтрока.ИмяМенеджера = "ПланыОбмена";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Перечисления;
	новСтрока.ИмяМенеджера = "Перечисления";
	новСтрока.ЕстьНомер = Ложь;

	метаПараметра = пЗначениеПараметра.Метаданные();
	этоПредопределенный = Ложь;
	Попытка
		этоПредопределенный = пЗначениеПараметра.Предопределенный;
	Исключение
	КонецПопытки;
	
	Для каждого строкаМенеджера Из тзМенеджеры Цикл
		Если строкаМенеджера.Менеджер.ТипВсеСсылки().СодержитТип(типПараметра) Тогда
			Если этоПредопределенный Тогда
				имяПредопределенного = строкаМенеджера.Менеджер[метаПараметра.Имя].ПолучитьИмяПредопределенного(пЗначениеПараметра);
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+"."+имяПредопределенного;
			ИначеЕсли Не ЗначениеЗаполнено(пЗначениеПараметра) Тогда
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".ПустаяСсылка()";		
			ИначеЕсли строкаМенеджера.ИмяМенеджера = "Перечисления" Тогда
				индексЗначенияПеречисления = Перечисления[метаПараметра.Имя].Индекс(пЗначениеПараметра);
				имяЗначения = Метаданные.Перечисления[метаПараметра.Имя].ЗначенияПеречисления[индексЗначенияПеречисления].Имя;
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+"."+имяЗначения;
			ИначеЕсли строкаМенеджера.ЕстьНомер = Истина Тогда
				периодичностьНомера = Ложь;
				Если строкаМенеджера.ИмяМенеджера = "Документы" ИЛИ строкаМенеджера.ИмяМенеджера = "БизнесПроцессы" Тогда 
					периодичностьНомера = ?(метаПараметра.ПериодичностьНомера = "Непериодический",Ложь,Истина);
				КонецЕсли;
				Если периодичностьНомера Тогда
					периодПараметр = пЗначениеПараметра.Дата;
					Если Строка(метаПараметра.ПериодичностьНомера) = "Год" Тогда
						периодПараметр = НачалоГода(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Квартал" Тогда
						периодПараметр = НачалоКвартала(периодПараметр);						
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Месяц" Тогда
						периодПараметр = НачалоМесяца(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "День" Тогда
						периодПараметр = НачалоДня(периодПараметр);
					КонецЕсли;
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("""+СокрЛП(пЗначениеПараметра.Номер)
						+""",Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")
						+",Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					КонецЕсли;
				Иначе
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("""+СокрЛП(пЗначениеПараметра.Номер)+""")";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")+")";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли строкаМенеджера.ИмяМенеджера = "ПланыВидовХарактеристик" Тогда
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоКоду("""+СокрЛП(пЗначениеПараметра.Код)+""")";
			ИначеЕсли метаПараметра.Имя = "ПоказателиСхемМотивации" Или метаПараметра.Имя = "_ПоказателиПоУчасткам" Тогда           //удалить для Инфостарт
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоРеквизиту(""Идентификатор"","""+СокрЛП(пЗначениеПараметра.Идентификатор)+""")";
			ИначеЕсли метаПараметра.ДлинаКода>0 Тогда
				Если Строка(метаПараметра.ТипКода) = "Строка" Тогда
					текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоКоду("""+СокрЛП(пЗначениеПараметра.Код)+""")";
				Иначе
					текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоКоду("+Формат(пЗначениеПараметра.Код,"ЧГ=0")+")";
				КонецЕсли;
			Иначе
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНаименованию("""+СокрЛП(пЗначениеПараметра.Наименование)+""")";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
				
	Возврат текстПараметр;
	
КонецФункции

Процедура ОбработатьТЗПередВыводом(пТаблица)
	
	Если пТаблица.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	массивКолонок = Новый Массив;
	Для каждого колонка ИЗ пТаблица.Колонки Цикл
		Если колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			массивКолонок.Добавить(колонка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого колонка ИЗ массивКолонок Цикл
		индКолонки = пТаблица.Колонки.Индекс(колонка);
		имяКолонки = колонка.Имя;
		имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
		пТаблица.Колонки.Добавить(имяКолонкиРасшифровки);
		массивПредставлений = Новый Массив;
		Для каждого строкаТЗ Из пТаблица Цикл
			тзРезультат = строкаТЗ[имяКолонки];
			Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
				строкаТЗ[имяКолонкиРасшифровки] = тзРезультат;
				массивПредставлений.Добавить("ТаблицаЗначений("+тзРезультат.Количество()+")");
			ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
				значениеХЗ = тзРезультат.Получить();
				строкаТЗ[имяКолонкиРасшифровки] = значениеХЗ;
				массивПредставлений.Добавить("ХранилищеЗначения("+ТипЗнч(значениеХЗ)+")");
			Иначе
				массивПредставлений.Добавить("");
				строкаТЗ[имяКолонкиРасшифровки] = строкаТЗ[имяКолонки];
			КонецЕсли;
		КонецЦикла;						 
		пТаблица.Колонки.Удалить(колонка);
		пТаблица.Колонки.Вставить(индКолонки,имяКолонки,Новый ОписаниеТипов("Строка"),имяКолонки);
		пТаблица.ЗагрузитьКолонку(массивПредставлений, имяКолонки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДЗПередВыводом(пДерево)
	
	Если мТаблицаОписанияДерева.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	пМассивКолонок = Новый Массив;
	Для каждого колонка ИЗ пДерево.Колонки Цикл
		Если колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			пМассивКолонок.Добавить(колонка);
			индКолонки = пДерево.Колонки.Индекс(колонка);
			имяКолонки = колонка.Имя;
			имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
			пДерево.Колонки.Добавить(имяКолонкиРасшифровки);
			имяКолонкиПредставления = имяКолонки+"__СлужебныйПредставление__";
			пДерево.Колонки.Добавить(имяКолонкиПредставления);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого колонка ИЗ пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
		имяКолонкиПредставления = имяКолонки+"__СлужебныйПредставление__";
		
		Для каждого строкаОписания Из мТаблицаОписанияДерева Цикл
			Если строкаОписания.КолвоПодчиненных = 0 Тогда
				Продолжить;	
			КонецЕсли;
			массивПредставлений = Новый Массив;
			Для каждого строкаДерева ИЗ строкаОписания.СтрокаДерева.Строки Цикл
				тзРезультат = строкаДерева[имяКолонки];
				Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
					строкаДерева[имяКолонкиРасшифровки] = тзРезультат;
					массивПредставлений.Добавить("ТаблицаЗначений("+тзРезультат.Количество()+")");
				ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
					значениеХЗ = тзРезультат.Получить();
					строкаДерева[имяКолонкиРасшифровки] = значениеХЗ;
					массивПредставлений.Добавить("ХранилищеЗначения("+ТипЗнч(значениеХЗ)+")");
				Иначе
					массивПредставлений.Добавить("");
					строкаДерева[имяКолонкиРасшифровки] = строкаДерева[имяКолонки];
				КонецЕсли;			
			КонецЦикла;
			строкаОписания.СтрокаДерева.Строки.ЗагрузитьКолонку(массивПредставлений, имяКолонкиПредставления);
		КонецЦикла;	
	КонецЦикла;
	
	Для каждого колонка ИЗ пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		пДерево.Колонки.Удалить(колонка);
		пДерево.Колонки[имяКолонки+"__СлужебныйПредставление__"].Имя = имяКолонки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыводаДерева()
	текущийТекстЗапроса = вПолучитьТекстЗапроса(Истина);
	Если Найти(ВРег(текущийТекстЗапроса),"ИТОГИ")=0 Тогда		//точно не дерево
		Возврат Ложь;	
	КонецЕсли;
	РезультатДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого строкаКорня Из РезультатДерево.Строки Цикл
		Если строкаКорня.Строки.Количество()>0 Тогда    //точно дерево
			//СоздатьОписаниеДерева(РезультатДерево);
			Возврат Истина;									
		КонецЕсли;
	КонецЦикла;
	РезультатДерево = Новый ДеревоЗначений;
	Возврат Ложь;										//все-таки не дерево
КонецФункции

Процедура СоздатьОписаниеДерева(пДерево)
	
	//Если мТаблицаОписанияДерева = Неопределено Тогда
	//	мТаблицаОписанияДерева = Новый ТаблицаЗначений;
	//	мТаблицаОписанияДерева.Колонки.Добавить("СтрокаДерева");
	//	мТаблицаОписанияДерева.Колонки.Добавить("Уровень",Новый ОписаниеТипов("Число"));
	//Иначе
		мТаблицаОписанияДерева.Очистить();
	//КонецЕсли;
	
	текСтроки = пДерево.Строки;
	текУровень = 0;
	Пока Истина Цикл
		Если текСтроки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		массивСтрок = Новый Массив;
		Для каждого строкаДерева Из текСтроки Цикл
			новСтрока = мТаблицаОписанияДерева.Добавить();
			новСтрока.СтрокаДерева = строкаДерева;
			новСтрока.Уровень = текУровень;			 
			колвоПодчиненных = 0;
			Для каждого строкаПодчиненная Из строкаДерева.Строки Цикл
				массивСтрок.Добавить(строкаПодчиненная);
				колвоПодчиненных = колвоПодчиненных + 1;
			КонецЦикла;
			новСтрока.КолвоПодчиненных = колвоПодчиненных;
		КонецЦикла;
		текСтроки = массивСтрок;
		текУровень = текУровень + 1;
	КонецЦикла;
	мТаблицаОписанияДерева.Сортировать("Уровень Убыв");
		
КонецПроцедуры

Процедура СвернутьДеревоДоУровня(Уровень)
	
	//небольшое ускорение для ОФ
	Если Уровень <> Неопределено И Уровень>0 Тогда
		Для каждого строкаДерева Из РезультатДерево.Строки Цикл
			ЭлементыФормы.ТаблицаРезультата.Свернуть(строкаДерева);
		КонецЦикла;
	КонецЕсли;

	Для каждого строкаОписания Из мТаблицаОписанияДерева Цикл
		Если строкаОписания.КолвоПодчиненных = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Уровень = Неопределено ИЛИ строкаОписания.Уровень<Уровень Тогда
			Если НЕ ЭлементыФормы.ТаблицаРезультата.Развернут(строкаОписания.СтрокаДерева) Тогда
				ЭлементыФормы.ТаблицаРезультата.Развернуть(строкаОписания.СтрокаДерева,Ложь);
			КонецЕсли;
		Иначе
			Если ЭлементыФормы.ТаблицаРезультата.Развернут(строкаОписания.СтрокаДерева) Тогда
				ЭлементыФормы.ТаблицаРезультата.Свернуть(строкаОписания.СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидимостьКнопокДереваРезультатов(этоДерево)
	Если этоДерево Тогда
		ЭлементыФормы.ТаблицаРезультата.КонтекстноеМеню = ЭлементыФормы.КоманднаяПанельРезультатДерево;
	Иначе
		ЭлементыФормы.ТаблицаРезультата.КонтекстноеМеню = ЭлементыФормы.КоманднаяПанельРезультат;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()

	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;

КонецПроцедуры // НовыйФайл()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()

	Если вСохранитьЗапросыВФайл(Истина) Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = ИмяФайла;
		Длг.Каталог = ИмяПути;
		Длг.Заголовок = "Выберите файл со списком запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайла = Длг.ПолноеИмяФайла;
			ИмяПути = Длг.Каталог;
			вЗагрузитьЗапросыИзФайла();
			мТекущаяСтрока = НеОпределено;
			моСохранитьИмяФайла();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()

	вСохранитьЗапросыВФайл();

КонецПроцедуры // Сохранить()

Процедура ОбработчикАвтосохранения()
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Сохранить();
	КонецЕсли;
КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()

	вСохранитьЗапросыВФайл(Ложь, Истина);

КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура Настройка()

	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройки");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();

	вОбработкаАвтосохранения();

КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Элемент = Неопределено, Пакетный = Неопределено, ТекстЗапроса = Неопределено)

	вСохранитьЗапросТекущейСтроки();

	ОбъектЗапрос = Новый Запрос;
	ОбъектЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Для каждого СтрокаПараметров Из мФормаПараметров.ПараметрыТаблица Цикл
		ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
		Если СтрокаПараметров.Тип = "Таблица" Тогда
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра,СтрокаПараметров.ДанныеЗначения);	
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса <> Неопределено Тогда
		ОбъектЗапрос.Текст = ТекстЗапроса;
	Иначе
		ОбъектЗапрос.Текст = вПолучитьТекстЗапроса(Истина);
	КонецЕсли; 

	Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
		Предупреждение("Не заполнен текст запроса!", 30);
		Возврат;
	КонецЕсли;
	
	вБэкапЗапросаПередВыполнением();

	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		Если Пакетный <> Неопределено Тогда
			мРезЗапроса = ОбъектЗапрос.ВыполнитьПакет();
		Иначе
			мРезЗапроса = ОбъектЗапрос.Выполнить();
		КонецЕсли;
		ВремяКонцаВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
		мТаблицаЗагружена = Ложь;

		вЗагрузитьРезультат();
		
		ВремяСтрокой = Формат((ВремяКонцаВыполнения-ВремяНачала)/1000, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");		
	Исключение
		Предупреждение(ОбрезатьСообщениеОбОшибке(ОписаниеОшибки()));
	КонецПопытки;
	
	вОчисткаБэкапаЗапросаПослеВыполнения();
	
	вУстановитьЗаголовокФормы();
	Заголовок = Заголовок + " (" + ВремяСтрокой +" с.)";	
	этоДерево = мТаблицаОписанияДерева.Количество()>0;
	Если этоДерево Тогда
		колвоЗаписей = мТаблицаОписанияДерева.Количество();
		//Для каждого строкаДерева Из РезультатДерево.ПолучитьЭлементы() Цикл
		//	Элементы.РезультатДерево.Развернуть(строкаДерева.ПолучитьИдентификатор(),Ложь);
		//КонецЦикла;		
	Иначе
		колвоЗаписей = РезультатТаблица.Количество();
	КонецЕсли;
	ВидимостьКнопокДереваРезультатов(этоДерево);

	ЭлементыФормы.НадписьКолвоСтрок.Заголовок = "Время выполнения: "+ВремяСтрокой+" с. Строк в результате: "+колвоЗаписей;

КонецПроцедуры // ВыполнитьЗапрос()

// Обработчик нажатия кнопки командной панели "Параметры"
//
Процедура Параметры()

	Если мФормаПараметров.Открыта() = Истина Тогда
		мФормаПараметров.Закрыть();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;

КонецПроцедуры // Параметры()

Процедура КоманднаяПанельФормыВставитьИзБуфера(Кнопка)
	Объект = Новый COMОбъект("htmlfile"); 
    текстБуфера = Объект.ParentWindow.ClipboardData.Getdata("Text");
	Попытка
		струкЗапросаБуфера = ЗначениеИзСтрокиВнутр(текстБуфера);
	Исключение
		Возврат;
	КонецПопытки;
	мТекущаяСтрока.ТекстЗапроса = струкЗапросаБуфера.Текст;
	мТекущаяСтрока.ПараметрыЗапроса.Очистить();
	Если ТипЗнч(струкЗапросаБуфера.Параметры) = Тип("Структура") Тогда
		свойствоИмяПараметра = "Ключ";
		свойствоЗначПараметра = "Значение";
	Иначе
		свойствоИмяПараметра = "ИмяПараметра";
		свойствоЗначПараметра = "ЗначениеПараметра";		
	КонецЕсли;
	Для каждого строкаПараметра Из струкЗапросаБуфера.Параметры Цикл
		новСтрока = мТекущаяСтрока.ПараметрыЗапроса.Добавить();
		новСтрока.ИмяПараметра = строкаПараметра[свойствоИмяПараметра];
		новСтрока.ЗначениеПараметра = строкаПараметра[свойствоЗначПараметра];
		Если ТипЗнч(строкаПараметра[свойствоЗначПараметра]) = Тип("Массив") Тогда
			списокПараметр = Новый СписокЗначений;
			списокПараметр.ЗагрузитьЗначения(строкаПараметра[свойствоЗначПараметра]);
			новСтрока.ЗначениеПараметра = списокПараметр;
		КонецЕсли;
	КонецЦикла;
	
	мИдетДобавление = Истина;
	мАктивизированаДобавляемаяЗапись = Истина;
	
	ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	
	мИдетДобавление = Ложь;
	мАктивизированаДобавляемаяЗапись = Ложь;

КонецПроцедуры

Процедура КоманднаяПанельФормыСкопироватьВБуфер(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	рез = Новый Структура;
	рез.Вставить("Текст",мТекущаяСтрока.ТекстЗапроса);
	рез.Вставить("Параметры",мТекущаяСтрока.ПараметрыЗапроса);
	строкаРез = ЗначениеВСтрокуВнутр(рез);
	Попытка
		Объект = Новый COMОбъект("htmlfile"); 
	    Объект.ParentWindow.ClipboardData.Setdata("Text", строкаРез);
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаДобавитьПеренос(Кнопка)
    НовыйТекст = "";
    Для Ном = 1 По ЭлементыФормы.ТекстЗапроса.КоличествоСтрок() Цикл
    	НовыйТекст = НовыйТекст + "|" + ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(Ном) + Символы.ПС;
    КонецЦикла;
    
    ЭлементыФормы.ТекстЗапроса.УстановитьТекст(СокрЛП(НовыйТекст));
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаУбратьПеренос(Кнопка)
    ЭлементыФормы.ТекстЗапроса.УстановитьТекст(СтрЗаменить(вПолучитьТекстЗапроса(Истина), "|", ""));
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаПолучитьКод(Кнопка)
	
	пНазваниеЗапроса = "Запрос";
    Если НЕ ВвестиСтроку(пНазваниеЗапроса, "Введите Имя запроса") Тогда
    	Возврат;
    КонецЕсли; 
    КодЗапроса = пНазваниеЗапроса + " = Новый Запрос;" + Символы.ПС;
    НовыйТекст = "";
	Для Ном = 1 По ЭлементыФормы.ТекстЗапроса.КоличествоСтрок() Цикл
		Текст = СтрЗаменить(ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(Ном),"|","");
		Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));
    	НовыйТекст = НовыйТекст + Символы.Таб+"|" + Текст + Символы.ПС;
    КонецЦикла;

    КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".Текст = " + Символы.ПС +Символы.Таб+ """"+ СокрЛП(Сред(НовыйТекст,3)) + """"+Символы.ПС+";" + Символы.ПС;
    ТекстЗапроса = СтрЗаменить(вПолучитьТекстЗапроса(Истина), "|", "");
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Предупреждение("Отсутствует текст запроса.");
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрЗапроса Из мФормаПараметров.ПараметрыТаблица Цикл
		Если ТипЗнч(ПараметрЗапроса.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			Если ПараметрЗапроса.ЗначениеПараметра.Количество()>0 Тогда
				КодЗапроса = КодЗапроса + ПараметрЗапроса.ИмяПараметра+" = Новый Массив;"+Символы.ПС;
				Для каждого элСписка Из ПараметрЗапроса.ЗначениеПараметра Цикл
					текстЭлемента = ПолучитьТекстПараметра(элСписка.Значение);
					КодЗапроса = КодЗапроса + ПараметрЗапроса.ИмяПараметра+".Добавить("+текстЭлемента+");"+Символы.ПС;
				КонецЦикла;
				КодЗапроса = КодЗапроса + пНазваниеЗапроса+".УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""","+ПараметрЗапроса.ИмяПараметра+");"+Символы.ПС;
			КонецЕсли;
		Иначе
			текстПараметр = ПолучитьТекстПараметра(ПараметрЗапроса.ЗначениеПараметра);
			КодЗапроса = КодЗапроса + пНазваниеЗапроса+".УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""","+текстПараметр+");"+Символы.ПС;
		КонецЕсли;
	КонецЦикла;

    КодЗапроса = КодЗапроса + Символы.ПС+"Выборка = " + пНазваниеЗапроса + ".Выполнить().Выбрать();"+Символы.ПС;
	КодЗапроса = КодЗапроса + "Пока Выборка.Следующий() Цикл"+Символы.ПС;
	КодЗапроса = КодЗапроса + "//"+Символы.ПС;
	КодЗапроса = КодЗапроса + "КонецЦикла;"+Символы.ПС;
	ФормаКода = ПолучитьФорму("ФормаКодаЗапроса");
    ФормаКода.ЭлементыФормы.КодЗапроса.УстановитьТекст(КодЗапроса);
    ФормаКода.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатПроизвольныйКод(Кнопка)
	
	//Если РезультатТаблица.Количество()=0 Тогда Возврат; КонецЕсли; 
	код = "";
	ВвестиСтроку(код,"доступны все поля запроса стр.*",,Истина);
	текТаблица = ЭлементыФормы.ТаблицаРезультата.Значение;
	Если ТипЗнч(текТаблица) = Тип("ДеревоЗначений") Тогда
		мТаблицаОписанияДерева.Сортировать("Уровень");
		Для каждого строкаОписанияДерева Из мТаблицаОписанияДерева Цикл
			стр = строкаОписанияДерева.СтрокаДерева;
			Выполнить(код); 
		КонецЦикла;
	Иначе
		Для каждого стр Из текТаблица Цикл
			Выполнить(код); 
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();

КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	НадоСохранять = Истина;
	
	Если мИдетДобавление Тогда
		Если мАктивизированаДобавляемаяЗапись Тогда

			// Произошла отмена добавления записи.
			НадоСохранять = Ложь;
			мАктивизированаДобавляемаяЗапись = Ложь;
		Иначе
			мАктивизированаДобавляемаяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НадоСохранять Тогда
		вСохранитьЗапросТекущейСтроки();
	КонецЕсли;

	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);

		мФормаПараметров.ПараметрыТаблица.Очистить();
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого строкаПараметра из мТекущаяСтрока.ПараметрыЗапроса Цикл
				новСтрока = мФормаПараметров.ПараметрыТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(новСтрока,строкаПараметра);
				значПараметра = строкаПараметра.ЗначениеПараметра;
				Если ТипЗнч(значПараметра) = Тип("СписокЗначений") Тогда 
					новСтрока.Тип = "Список";
				ИначеЕсли ТипЗнч(значПараметра) = Тип("ТаблицаЗначений") Тогда
					новСтрока.Тип = "Таблица";
					новСтрока.ДанныеЗначения = значПараметра;
					новСтрока.ЗначениеПараметра = "ТаблицаЗначений("+значПараметра.Количество()+")";
				Иначе
					новСтрока.Тип = "Значение";
				КонецЕсли;					
			КонецЦикла;
		Иначе
			мТекущаяСтрока.ПараметрыЗапроса = мСтруктураТЗПараметров.СкопироватьКолонки();
		КонецЕсли;
		
	Иначе

		вЗадатьТекстЗапроса("");
		мФормаПараметров.ПараметрыТаблица.Очистить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущаяСтрока.ТекстЗапроса) Тогда
		ЭлементыФормы.ДеревоЗапросов.Колонки.Запрос.ТекстШапки = "Запрос ("+СтрЧислоСтрок(мТекущаяСтрока.ТекстЗапроса)+")";
	Иначе
		ЭлементыФормы.ДеревоЗапросов.Колонки.Запрос.ТекстШапки = "Запрос";
	КонецЕсли;

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Если Копирование Тогда
		Отказ = Истина;
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		вДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);
	Иначе
		мИдетДобавление = Истина;	
	КонецЕсли; 	
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Если мИдетДобавление Тогда

		Если ОтменаРедактирования Тогда
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		мИдетДобавление = Ложь;
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка=Ложь;

    //РеквизитДерево = ЭтаФорма["Дерево"];

    //ИДПриемник = Строка;
    // Если ИДПриемник = Неопределено => Корень дерева
    //Приемник = ?(ИДПриемник = Неопределено, Неопределено,
    //    РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    //МассивИДИсточник = ПараметрыПеретаскивания.Значение;
    Источник = ПараметрыПеретаскивания.Значение;
	Приемник = Строка;
    //Для Каждого ИДИсточник Из МассивИДИсточник Цикл
        //Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
        НоваяСтрока = СкопироватьСтрокуДерева(ДеревоЗапросов,Приемник,Источник);
        // Производится копирование в корень
        // Для "красоты" развернем вновь созданную ветвь
        Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
			//Элементы["Дерево"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(),
			//	Истина);
			ЭлементыФормы.ДеревоЗапросов.Развернуть(НоваяСтрока,Истина);
        КонецЕсли;
   // КонецЦикла;

    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        //Элементы["Дерево"].Развернуть(ИДПриемник, Истина);
		ЭлементыФормы.ДеревоЗапросов.Развернуть(Приемник,Истина);
	КонецЕсли;
	
	мТекущаяСтрока = НоваяСтрока;
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	// Узел нельзя переносить в узлы подчиненные ему самому
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов

    СтандартнаяОбработка = Ложь;

    //РеквизитДерево = ЭтаФорма["Дерево"];

    //ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
	//НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,
	//	РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    //МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

    //Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл
    ПереносимыйЭлемент = ПараметрыПеретаскивания.Значение;
		//ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(
		//	ИДПереносимыйЭлемент);

        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,Строка) Тогда
            ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
        КонецЕсли;
    //КонецЦикла;
КонецПроцедуры

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	текТаблица = ЭлементыФормы.ТаблицаРезультата.Значение;
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];
	Если текТаблица.Колонки.Найти(Колонка.Имя+"__СлужебныйРасшифровка__")<>Неопределено Тогда
		СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя+"__СлужебныйРасшифровка__"];	
	КонецЕсли;

	Если текТаблица.Колонки.Найти("РезультатЗапроса__СлужебныйРасшифровка__")<>Неопределено И 
		текТаблица.Колонки.Найти("НаименованиеТаблицы")<>Неопределено Тогда
		имяТаблицы = ВыбраннаяСтрока.НаименованиеТаблицы;
	Иначе	
		Если ТипЗнч(текТаблица) = Тип("ДеревоЗначений") Тогда
			текРодитель = ВыбраннаяСтрока.Родитель;
			Если текРодитель = Неопределено Тогда
				номерСтроки = текТаблица.Строки.Индекс(ВыбраннаяСТрока);
			Иначе
				номерСтроки = ВыбраннаяСтрока.Родитель.Строки.Индекс(ВыбраннаяСТрока);
			КонецЕсли;
		Иначе
			номерСтроки = текТаблица.Индекс(ВыбраннаяСтрока);	
		КонецЕсли;
		
		имяТаблицы = Колонка.Имя + ", строка " + Формат(номерСтроки+1,"ЧГ=0");
	КонецЕсли;

	Если ТипЗнч(СодержимоеЯчейки) = Тип("ХранилищеЗначения") Тогда
		СодержимоеЯчейки = СодержимоеЯчейки.Получить();
	КонецЕсли;
	
	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда	
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.Заголовок = "Вложенная таблица: "+имяТаблицы;
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		//ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("Запрос",Новый ОписаниеТипов("Строка"));
	ЭлементыФормы.ДеревоЗапросов.СоздатьКолонки();
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");	//для совместимости
	
	// Попытаемся загрузить последний открывавшийся файл запросов
	моВосстановитьИмяФайла();
	Если ПустаяСтрока(ИмяФайла) Тогда
		вСоздатьНовыйФайлЗапросов();
	Иначе
		вЗагрузитьЗапросыИзФайла();
		мТекущаяСтрока = НеОпределено;
	КонецЕсли;

	вОбработкаАвтосохранения();
	
	вОбработкаБэкапаЗапросов();

КонецПроцедуры // ПриОткрытии()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Сообщить("ОбработкаВыбора");
	//НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
	//НоваяСтрока[0] = мТекущаяСтрока[0]; // Запрос
	//НоваяСтрока[1] = мТекущаяСтрока[1]; // ТекстЗапроса
	//НоваяСтрока[2] = мТекущаяСтрока[2]; // ПараметрыЗапроса

	//вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока);

	//РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
	//РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
	//мТекущаяСтрока = НеОпределено;

	//ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;

	//Модифицированность = Истина;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если вСохранитьЗапросыВФайл(Истина) Тогда
		//СохранитьЗначение(ПрефиксНастроек+"ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		//СохранитьЗначение(ПрефиксНастроек+"ИнтервалАвтосохранения", ИнтервалАвтосохранения);
	Иначе
        СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

Процедура ВыборДействияВыполнитьЗапрос(Кнопка)
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Текст = "Выполнить запрос";
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Действие = Новый Действие("ВыполнитьЗапрос");
	ВыполнитьЗапрос();
КонецПроцедуры

Процедура ВыборДействияВыполнитьПакет(Кнопка)
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Текст = "Выполнить пакет";
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Действие = Новый Действие("ВыполнитьПакет");
	ВыполнитьПакет();
КонецПроцедуры

Процедура ВыборДействияПросмотрВременныхТаблиц(Кнопка)
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Текст = "Просмотр временных таблиц";
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДействиеПоУмолчанию.Действие = Новый Действие("ПросмотрВременныхТаблиц");
	ПросмотрВременныхТаблиц();
КонецПроцедуры

Процедура ВыполнитьПакет()
	ВыполнитьЗапрос(,Истина);
КонецПроцедуры

Процедура ПросмотрВременныхТаблиц()
	
	ТекстЗапроса = вПолучитьТекстЗапроса(Истина);

	ПакетыЗапроса = Новый Массив;
	текстОстаток = ТекстЗапроса;
	Пока Истина Цикл
		индРазделителя = Найти(текстОстаток,";");
		Если индРазделителя = 0 Тогда
			ПакетыЗапроса.Добавить(текстОстаток);
			Прервать;
		КонецЕсли;
		ПакетыЗапроса.Добавить(Сред(текстОстаток,1,индРазделителя-1));
		текстОстаток = Сред(текстОстаток,индРазделителя+1);
	КонецЦикла;

	ТекстВыполнения = "";	
	индВРезультате = 0;
	Для индПакета = 0 ПО ПакетыЗапроса.Количество()-1 Цикл
		пакет = ПакетыЗапроса[индПакета];
		ТекстВыполнения = ТекстВыполнения + пакет + ";";
		пакет = СтрЗаменить(пакет, Символы.Таб, " ");
		пакет = СтрЗаменить(пакет, Символы.ПС, " ");
		
		индПоместить = Найти(пакет,"ПОМЕСТИТЬ ");
		Если индПоместить<>0 Тогда
			остатокПакета = Сред(пакет,индПоместить+10);
			индПробела = Найти(остатокПакета," ");
			Если индПробела<>0 Тогда
				имяВТ = Сред(остатокПакета,1,индПробела-1);
				ТекстВыполнения = ТекстВыполнения + "ВЫБРАТЬ * ИЗ "+имяВТ+";";
				новСтрока = мТаблицыЗапроса.Добавить();
				новСтрока.ИмяТаблицы = имяВТ;
				новСтрока.ИндексВРезультате = индВРезультате+1;
				индВРезультате = индВРезультате + 1;
			КонецЕсли;
		КонецЕсли;
		индВРезультате = индВРезультате + 1;
	КонецЦикла;
	
	Если мТаблицыЗапроса.Количество()=0 Тогда
		Предупреждение("В запросе не используются временные таблицы!",60);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапрос(, Истина, ТекстВыполнения);
	мТаблицыЗапроса.Очистить();
	
КонецПроцедуры

Процедура КнопкаКонструкторЗапросаНажатие(Элемент)

    ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда 
		Конструктор = Новый КонструкторЗапроса(); 
	Иначе 
		Конструктор = Новый КонструкторЗапроса(ТекстЗапроса); 
	КонецЕсли;
	резКонструктор = Конструктор.ОткрытьМодально();
	Если резКонструктор Тогда
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Конструктор.Текст);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыСправка(Кнопка)
	Если мСправкаИнициализирована Тогда
		ОткрытьСправкуФормы();	
	Иначе
		ответ = Вопрос("Открытие справки может занять длительное время, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ответ = КодВозвратаДиалога.Да Тогда
			мСправкаИнициализирована = Истина;
			ОткрытьСправкуФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельРезультатРазвернутьВсе(Кнопка)
	СвернутьДеревоДоУровня(Неопределено);
КонецПроцедуры

Процедура КоманднаяПанельРезультатСвернутьВсе(Кнопка)
	СвернутьДеревоДоУровня(0);
КонецПроцедуры

Процедура КоманднаяПанельРезультатСвернутьПервыйУр(Кнопка)
	СвернутьДеревоДоУровня(1);
КонецПроцедуры

Процедура КоманднаяПанельРезультатСвернутьВторойУр(Кнопка)
	СвернутьДеревоДоУровня(2);
КонецПроцедуры

Процедура КоманднаяПанельРезультатСвернутьТретийУр(Кнопка)
	СвернутьДеревоДоУровня(3);
КонецПроцедуры

Процедура КоманднаяПанельРезультатСвернутьПроизвольно(Кнопка)
	введенноеЧисло = 1;
	резВведения = ВвестиЧисло(введенноеЧисло,"Введите уровень сворачивания",,0);
	Если резВведения Тогда
		СвернутьДеревоДоУровня(введенноеЧисло);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

моВосстановитьНастройки();
мИмяФайлаБэкапаЗапросов = КаталогВременныхФайлов()+ПрефиксНастроек
	+ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор+".tmp";

мЗаголовокФормы = Заголовок;

мТекущаяСтрока = НеОпределено;
мИдетДобавление = Ложь; 
мАктивизированаДобавляемаяЗапись = Ложь;
мСправкаИнициализирована = Ложь;

мФормаПараметров = Обработка.ПолучитьФорму("ФормаПараметров", ЭтаФорма);
мФормаПараметров.РазрешитьСостояниеПрикрепленное = Истина;
мФормаПараметров.РазрешитьСостояниеПрячущееся = Ложь;
мФормаПараметров.РазрешитьСостояниеСвободное = Истина;
мФормаПараметров.ПараметрыТаблица.Колонки.Добавить("ДанныеЗначения",Новый ОписаниеТипов("ТаблицаЗначений"));
мТаблицаЗагружена = Ложь;
мТаблицыЗапроса = Новый ТаблицаЗначений;
мТаблицыЗапроса.Колонки.Добавить("ИмяТаблицы",Новый ОписаниеТипов("Строка"));
мТаблицыЗапроса.Колонки.Добавить("ИндексВРезультате",Новый ОписаниеТипов("Число"));
мСтруктураТЗПараметров = Новый ТаблицаЗначений;
мСтруктураТЗПараметров.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка"));
мСтруктураТЗПараметров.Колонки.Добавить("ЗначениеПараметра");
мСтруктураТЗПараметров.Колонки.Добавить("ЭтоВыражение");              								//Для совместимости
мТаблицаОписанияДерева = Новый ТаблицаЗначений;
мТаблицаОписанияДерева.Колонки.Добавить("СтрокаДерева");
мТаблицаОписанияДерева.Колонки.Добавить("Уровень",Новый ОписаниеТипов("Число"));
мТаблицаОписанияДерева.Колонки.Добавить("КолвоПодчиненных",Новый ОписаниеТипов("Число"));


КлючУникальности = "УниформальнаяКонсольЗапросов";
