&НаКлиенте
Перем мТипДоИзменения;
&НаКлиенте
Перем мИмяДоИзменения;
&НаКлиенте
Перем мФлагЗакрытия;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ОбрезатьСообщениеОбОшибке(сообщение)
	резСообщение = сообщение;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;

	Возврат резСообщение;
КонецФункции


&НаКлиенте
Процедура ПродолжитьУдалитьНеиспользуемыеПараметры(РезультатВопроса,ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		список = Новый СписокЗначений;
		список.ЗагрузитьЗначения(ДополнительныеПараметры);
		список.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для каждого элСписка Из список Цикл
			строкаТЗ = ПараметрыТаблица[элСписка.Значение];
			Если строкаТЗ.Тип = "Таблица" Тогда
				УдалитьТЗПараметр(строкаТЗ.Адрес);
			КонецЕсли;
			ПараметрыТаблица.Удалить(элСписка.Значение);
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыНаСервере(ТекстЗапроса,соотвТЗПараметр)
	
	резВыполнения  = Новый Структура("Успех",Истина);
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		резВыполнения.Вставить("Успех",Ложь);
		резВыполнения.Вставить("Ошибка",ОписаниеОшибки());
		Возврат резВыполнения;
	КонецПопытки;
	
	соотвПараметры = Новый Соответствие;
	Для каждого строкаПараметры Из ПараметрыТаблица Цикл
		соотвПараметры.Вставить(строкаПараметры,Истина);	
	КонецЦикла;
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ТипПараметра = ПараметрЗапроса.ТипЗначения;
		ИмяПараметра =  ПараметрЗапроса.Имя;
		массивНайдено = ПараметрыТаблица.НайтиСтроки(Новый Структура("ИмяПараметра",ИмяПараметра));
		Если массивНайдено.Количество()=0 Тогда
			СтрокаПараметров = ПараметрыТаблица.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.Тип = "Значение";
			СтрокаПараметров.ЗначениеПараметра = ТипПараметра.ПривестиЗначение(Неопределено);			
		Иначе
			СтрокаПараметров = массивНайдено[0];
			соотвПараметры.Удалить(СтрокаПараметров);	
		КонецЕсли;
		
		Если ТипПараметра.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			Если СтрокаПараметров.Тип <> "Таблица" Тогда
				СтрокаПараметров.Тип = "Таблица";
				представление = "ТаблицаЗначений(0)";
				адрес = УстановитьНовуюТЗвПараметрНаСервере();
				СтрокаПараметров.ЗначениеПараметра = представление;			
				СтрокаПараметров.Адрес = адрес;
				соотвТЗПараметр[адрес] = представление;
			КонецЕсли;
		Иначе
			Если СтрокаПараметров.Тип = "Таблица" Тогда
				СтрокаПараметров.Тип = "Значение";
				соотвТЗПараметр.Удалить(СтрокаПараметров.Адрес);
				УдалитьИзВременногоХранилища(СтрокаПараметров.Адрес);
				СтрокаПараметров.Адрес = "";
				СтрокаПараметров.ЗначениеПараметра = ТипПараметра.ПривестиЗначение(Неопределено);
			Иначе
				Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра)=Тип("СписокЗначений") Тогда
					списокДляЗамены = Новый СписокЗначений;
					списокДляЗамены.ТипЗначения = ТипПараметра;
					Для каждого элСпискаПараметра Из СтрокаПараметров.ЗначениеПараметра Цикл
						Если ТипПараметра.СодержитТип(ТипЗнч(элСпискаПараметра.Значение)) Тогда
							списокДляЗамены.Добавить(элСпискаПараметра.Значение);		
						КонецЕсли;
						СтрокаПараметров.ЗначениеПараметра = списокДляЗамены;
					КонецЦикла;
				Иначе
					СтрокаПараметров.ЗначениеПараметра = ТипПараметра.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	НеиспользуемыеПараметры = Новый Массив;
	Для каждого ключИзначение Из соотвПараметры Цикл
		НеиспользуемыеПараметры.Добавить(ПараметрыТаблица.Индекс(ключИзначение.Ключ));
	КонецЦикла;
	резВыполнения.Вставить("НеиспользуемыеПараметры",НеиспользуемыеПараметры);
	Возврат резВыполнения;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПолеЗначения()
	
	текДанные = Элементы.ПараметрыТаблица.ТекущиеДанные;
	Если ТипЗнч(текДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		текДанные.Тип = "Список";		
	КонецЕсли;
	массивТипов = Новый Массив;
	массивТипов.Добавить(ТипЗнч(текДанные.ЗначениеПараметра));	
	Элементы.ПараметрыЗначениеПараметра.ОграничениеТипа = Новый ОписаниеТипов(массивТипов);
	//Элементы.ПараметрыЗначениеПараметра.ВыбиратьТип = (текДанные.Тип = "Значение");
	
КонецФункции

&НаКлиенте
Функция УстановитьНовуюТЗвПараметр(адресИсходный = Неопределено)
	адрес = УстановитьНовуюТЗвПараметрНаСервере(адресИсходный);
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(ВладелецФормы.уфПредставленияТаблицПараметров);	
	Если адресИсходный = Неопределено Тогда
		представление = "ТаблицаЗначений(0)";	
	Иначе
		представление = соотвТЗПараметр[адресИсходный];
	КонецЕсли;
	соотвТЗПараметр[адрес] = представление;
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,ВладелецФормы.уфПредставленияТаблицПараметров);
	Возврат адрес;
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьНовуюТЗвПараметрНаСервере(адресИсходный = Неопределено)
	Если адресИсходный = Неопределено Тогда
		новТаблица = Новый ТаблицаЗначений;
	Иначе
		новТаблица = ПолучитьИзВременногоХранилища(адресИсходный);
	КонецЕсли;
	адрес = ПоместитьВоВременноеХранилище(новТаблица,Новый УникальныйИдентификатор());
	Возврат адрес;
КонецФункции

&НаКлиенте
Функция УдалитьТЗПараметр(адрес)
	УдалитьИзВременногоХранилища(адрес);	
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(ВладелецФормы.уфПредставленияТаблицПараметров);
	соотвТЗПараметр.Удалить(адрес);
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,ВладелецФормы.уфПредставленияТаблицПараметров);
КонецФункции

&НаКлиенте
Функция ОчисткаПараметраТЗ(адрес)
	представление = "ТаблицаЗначений(0)";
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(ВладелецФормы.уфПредставленияТаблицПараметров);
	соотвТЗПараметр[адрес] = представление;
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,ВладелецФормы.уфПредставленияТаблицПараметров);
	ОчисткаПараметраТЗНаСервере(адрес);
	Возврат представление;
КонецФункции

&НаСервереБезКонтекста
Процедура ОчисткаПараметраТЗНаСервере(адрес)	
	тзДанные = ПолучитьИзВременногоХранилища(адрес);
	тзДанные.Очистить();
	ПоместитьВоВременноеХранилище(тзДанные,адрес);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ПАРАМЕТРОВ

&НаКлиенте
Процедура ПараметрыЗначениеПараметраПриИзменении(Элемент)
	ОбновитьПолеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	текДанные = Элементы.ПараметрыТаблица.ТекущиеДанные;	
	Если текДанные.Тип = "Таблица" Тогда
		СтандартнаяОбработка = Ложь;
		представление = ОчисткаПараметраТЗ(текДанные.Адрес);
		текДанные.ЗначениеПараметра = представление;
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	текДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда 
		текДанные.Тип = "Значение";
	КонецЕсли;
	Если Копирование И текДанные.Тип = "Таблица" Тогда
		текДанные.Адрес = УстановитьНовуюТЗвПараметр(текДанные.Адрес);	
	КонецЕсли;
	мТипДоИзменения = текДанные.Тип;
	ОбновитьПолеЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВладелецФормы.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТаблицаПередУдалением(Элемент, Отказ)
	Если Отказ Тогда Возврат; КонецЕсли;
	ВладелецФормы.Модифицированность = Истина;
	текДанные = Элементы.ПараметрыТаблица.ТекущиеДанные;
	Если текДанные.Тип = "Таблица" Тогда
		УдалитьТЗПараметр(текДанные.Адрес);	
	КонецЕсли;
	удаляемыеТЗ = Новый Массив();
	удаляемыеТЗ.Добавить(текДанные.Адрес);
	Оповестить("УдалениеТаблицЗначенийВПараметрах",удаляемыеТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзЗапроса(Команда)
	
	ТекстЗапроса = ВладелецФормы.ТекстЗапроса;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ПоказатьПредупреждение(,"Отсутствует текст запроса.");
		Возврат;
	КонецЕсли;
	
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(ВладелецФормы.уфПредставленияТаблицПараметров);
	резВыполнения = ЗаполнитьПараметрыНаСервере(ТекстЗапроса,соотвТЗПараметр);
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,ВладелецФормы.уфПредставленияТаблицПараметров);
	Если резВыполнения.Успех = Ложь Тогда
		ПоказатьПредупреждение(,ОбрезатьСообщениеОбОшибке(резВыполнения.Ошибка));
		Возврат;
	КонецЕсли;
	
	Если резВыполнения.НеиспользуемыеПараметры.Количество()>0 Тогда
		оповещение = Новый ОписаниеОповещения("ПродолжитьУдалитьНеиспользуемыеПараметры",ЭтаФорма,резВыполнения.НеиспользуемыеПараметры);
		ПоказатьВопрос(оповещение,"Удалить неиспользуемые параметры?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТипПриИзменении(Элемент)
	
	текДанные = Элементы.ПараметрыТаблица.ТекущиеДанные;
	
	Если текДанные.Тип = "Таблица" Тогда
		Если мТипДоИзменения<>"Таблица" Тогда
			текДанные.ЗначениеПараметра = "ТаблицаЗначений(0)";
			текДанные.Адрес = УстановитьНовуюТЗвПараметр();
		КонецЕсли;
	ИначеЕсли текДанные.Тип = "Список" Тогда
		Если мТипДоИзменения = "Таблица" Тогда
			УдалитьТЗПараметр(текДанные.Адрес);
			текДанные.ЗначениеПараметра = Новый СписокЗначений;
			текДанные.Адрес = "";
		ИначеЕсли Не ТипЗнч(текДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			ЗначениеПараметра = текДанные.ЗначениеПараметра;
			НовыйСписокЗначений = Новый СписокЗначений;
			типы = новый массив;
			типы.Добавить(ТипЗнч(ЗначениеПараметра));
			НовыйСписокЗначений.ТипЗначения = Новый ОписаниеТипов(типы);
			текДанные.ЗначениеПараметра = НовыйСписокЗначений;			
			Если ЗначениеПараметра <> Неопределено Тогда
				текДанные.ЗначениеПараметра.Добавить(ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если мТипДоИзменения = "Таблица" Тогда
			УдалитьТЗПараметр(текДанные.Адрес);
			текДанные.Адрес = "";
			текДанные.ЗначениеПараметра = Неопределено;
		ИначеЕсли ТипЗнч(текДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			Если текДанные.ЗначениеПараметра.Количество() <> 0 Тогда
				текДанные.ЗначениеПараметра = текДанные.ЗначениеПараметра[0].Значение;
			Иначе
				текДанные.ЗначениеПараметра = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мТипДоИзменения = текДанные.Тип;
	
	ОбновитьПолеЗначения();
	//Элементы.ПараметрыЗначениеПараметра.ВыбиратьТип = (текДанные.Тип = "Значение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	текДанные = Элементы.ПараметрыТаблица.ТекущиеДанные;
	Если текДанные.Тип = "Таблица" Тогда
		СтандартнаяОбработка = Ложь;
		формаРедактирования = ПолучитьФорму("ВнешняяОбработка.УниформальнаяКонсольЗапросов.Форма.ФормаВложеннойТаблицыУпр",Неопределено, ВладелецФормы);
		формаРедактирования.РежимРедактирования = Истина;
		формаРедактирования.Заголовок = "Параметр: "+текДанные.ИмяПараметра;
		формаРедактирования.АдресТаблицы = текДанные.Адрес;
		формаРедактирования.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновлениеТаблицыВПараметрах" Тогда
		найденныеСтроки = ПараметрыТаблица.НайтиСтроки(Новый Структура("Адрес",Параметр.Значение));
		Для каждого строкаПараметра Из найденныеСтроки Цикл
			строкаПараметра.ЗначениеПараметра = Параметр.Представление;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если мФлагЗакрытия = Неопределено Тогда
		соотвПараметры = Новый Соответствие;
		массивОшибок = Новый Массив;
		Для каждого строкаПараметра Из ПараметрыТаблица Цикл
			Если соотвПараметры[строкаПараметра.ИмяПараметра]<>Неопределено Тогда
				номСтроки = ПараметрыТаблица.Индекс(строкаПараметра)+1;
				массивОшибок.Добавить("В строке "+номСтроки+" найден параметр с дублирующимся именем """
					+строкаПараметра.ИмяПараметра+"""");
			Иначе
				соотвПараметры[строкаПараметра.ИмяПараметра] = ПараметрыТаблица.Индекс(строкаПараметра);
			КонецЕсли;
		КонецЦикла;
		Если массивОшибок.Количество()>0 Тогда
			Отказ = Истина;
			оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытьДублированиеПараметров",ЭтаФорма);
			ПоказатьВопрос(оповещение,"Обнаружено дублирование параметров, продолжить?",РежимДиалогаВопрос.ДаНет);
			ОчиститьСообщения();
			Для каждого ошибка Из массивОшибок Цикл
				Сообщить(ошибка);	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	мФлагЗакрытия = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытьДублированиеПараметров(РезультатВопроса,ДополнительныеПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		мФлагЗакрытия = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры
