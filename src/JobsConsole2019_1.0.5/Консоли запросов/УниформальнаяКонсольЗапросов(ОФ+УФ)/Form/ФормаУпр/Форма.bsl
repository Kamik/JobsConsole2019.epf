
&НаКлиенте
Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
&НаКлиенте
Перем мИдетДобавление;                  // признак добавления
&НаКлиенте
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи
&НаКлиенте
Перем мФормаПараметров;                 // форма параметров
&НаКлиенте
Перем мЗаголовокФормы;                  // заголовок формы
&НаКлиенте
Перем мФлагСохранения;                  // для управления сохранением

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ УПРАВЛЯЕМЫМИ ФОРМАМИ

&НаСервере
Процедура УстановитьНовоеИмяКоманды(пИмяЭлемента,пИмяКоманды)
	Элементы[пИмяЭлемента].ИмяКоманды = пИмяКоманды;
КонецПроцедуры

&НаСервере
Процедура ВызватьПроцедуруМодуляОбъекта(ИмяПроцедуры)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Выполнить("ОбработкаОбъект."+ИмяПроцедуры+"()");
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьКоллекциюВМассив(Коллекция) Экспорт
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из Коллекция Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из Коллекция.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции

&НаКлиенте
Функция СкопироватьКоллекциюВКоллекцию(КоллекцияПриемник,КоллекцияИсточник) Экспорт
	
	КоллекцияПриемник.Очистить();
	Для каждого строкаИсточника ИЗ КоллекцияИсточник Цикл
		строкаПриемника = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(строкаПриемника,строкаИсточника);
	КонецЦикла;
    
КонецФункции

&НаСервере
Процедура ВывестиТЗнаФормуПрограммно(тзВывода,ИмяТабПоля,ИмяЭФТабПоля)
	
	эфТабПоле = Элементы[ИмяЭФТабПоля];
	добРеквизиты = Новый Массив;
	Для каждого колонка Из тзВывода.Колонки Цикл
		требуемыйТип = колонка.ТипЗначения;
		Если требуемыйТип.СодержитТип(Тип("Тип")) ИЛИ требуемыйТип.СодержитТип(Тип("МоментВремени")) Тогда
			требуемыйТип = Новый ОписаниеТипов();	
		КонецЕсли;
		новКолонка = Новый РеквизитФормы(колонка.Имя,требуемыйТип,ИмяТабПоля);	
		добРеквизиты.Добавить(новКолонка);
	КонецЦикла;
	удалРеквизиты = Новый Массив;
	Для каждого реквизитТабПоля Из ПолучитьРеквизиты(ИмяТабПоля) Цикл
		удалРеквизиты.Добавить(реквизитТабПоля.Путь+"."+реквизитТабПоля.Имя);	
	КонецЦикла;
	ИзменитьРеквизиты(добРеквизиты,удалРеквизиты);
	ЗначениеВРеквизитФормы(тзВывода,ИмяТабПоля);	
	
	индУдаления = эфТабПоле.ПодчиненныеЭлементы.Количество()-1;
	Пока индУдаления>=0 Цикл
		Элементы.Удалить(эфТабПоле.ПодчиненныеЭлементы[индУдаления]);
		индУдаления = индУдаления-1;
	КонецЦикла;
	Для Каждого Колонка Из тзВывода.Колонки Цикл
		Если Найти(Колонка.Имя,"__СлужебныйРасшифровка__")<>0 Тогда
			Продолжить;
		КонецЕсли;
	  	НовыйЭлемент = Элементы.Добавить(ИмяТабПоля+"_" + Колонка.Имя, Тип("ПолеФормы"), эфТабПоле);
	  	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	  	НовыйЭлемент.ПутьКДанным = ИмяТабПоля+"." + Колонка.Имя;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуДереваИзСтроки(СтрокаПриемник,СтрокаИсточник)
	СтрокаПриемник.Запрос = СтрокаИсточник.Запрос;
	СтрокаПриемник.ТекстЗапроса = СтрокаИсточник.ТекстЗапроса;
	СкопироватьКоллекциюВКоллекцию(СтрокаПриемник.ПараметрыЗапроса,СтрокаИсточник.ПараметрыЗапроса);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция вПолучитьТекстЗапроса(СВыделением = Ложь)
	
	Если Не СВыделением ИЛИ Не Объект.ИспользоватьТолькоВыделеннуюОбласть Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;

    ТекстЗап = Элементы.ТекстЗапроса.ВыделенныйТекст;
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ТекстЗапроса;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция вЗадатьТекстЗапроса(Текст, ТекстHTML = Неопределено)
	
	Если ПустаяСтрока(Текст) Тогда
		ТекстЗапроса = "";
		ТекстЗапросаHTML = "";
	ИначеЕсли ТекстЗапроса<>Текст Тогда
		ТекстЗапроса = Текст;
		ТекстЗапросаHTML = "";
		Если Объект.РежимПодсветки_УФ Тогда
			Если ПустаяСтрока(ТекстHTML) Тогда
				ТекстЗапросаHTML = РаскраситьТекстЗапроса(ТекстЗапроса);
			Иначе
				ТекстЗапросаHTML = ТекстHTML;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура вУстановитьЗаголовокФормы()
	
	Если Объект.ИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + Объект.ИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура вСохранитьЗапросТекущейСтроки()
	
	Если Объект.ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		текДанные = Объект.ДеревоЗапросов.НайтиПоИдентификатору(мТекущаяСтрока);
		Если текДанные = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		Если текДанные.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		текДанные.ТекстЗапроса = вПолучитьТекстЗапроса(Ложь);
		текДанные.ТекстЗапросаHTML = ТекстЗапросаHTML;
		текДанные.ПараметрыЗапроса.Очистить();
		Для каждого параметр ИЗ мФормаПараметров.ПараметрыТаблица Цикл
			новСтрока = текДанные.ПараметрыЗапроса.Добавить();
			новСтрока.ИмяПараметра = параметр.ИмяПараметра;
			новСтрока.ЗначениеПараметра = параметр.ЗначениеПараметра;
			Если параметр.Тип = "Таблица" Тогда
				новСтрока.ЗначениеПараметра = параметр.Адрес;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура вОчиститьЗначения()

	Объект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	вЗадатьТекстЗапроса("");
	мФормаПараметров.ПараметрыТаблица.Очистить();
	//мФормаПараметров.струкПараметрыТипаТЗ.Очистить();
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
	Для каждого КлючИЗначение ИЗ соотвТЗПараметр Цикл
		УдалитьИзВременногоХранилища(КлючИЗначение.Ключ);
	КонецЦикла;
	соотвТЗПараметр.Очистить();
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,уфПредставленияТаблицПараметров);
	//мТаблицыЗапроса.Очистить();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, соотвТЗПараметр)

	НовоеДерево.Строки.Очистить();

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл

		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Запрос = СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса = СтрокаДерева.ТекстЗапроса;
		
		НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка"));
		//НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка"));
		НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
		//НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ЭтоВыражение",Новый ОписаниеТипов("Булево")); 					//для совместимости
		Если ТипЗнч(СтрокаДерева.ПараметрыЗапроса)=Тип("ТаблицаЗначений") Тогда
			имяКолонкиЗначения = "ЗначениеПараметра";
			Если СтрокаДерева.ПараметрыЗапроса.Колонки.Найти("ЗначениеПараметра")=Неопределено Тогда
				имяКолонкиЗначения = "Значение";
			КонецЕсли;
			Для каждого строкаПараметра Из СтрокаДерева.ПараметрыЗапроса Цикл
				новПараметр = НоваяСтрока.ПараметрыЗапроса.Добавить();
				новПараметр.ИмяПараметра = строкаПараметра.ИмяПараметра;
				значПараметра = строкаПараметра[имяКолонкиЗначения];
				Если ТипЗнч(значПараметра)=Тип("ТаблицаЗначений") Тогда
					адрес = ПоместитьВоВременноеХранилище(значПараметра,Новый УникальныйИдентификатор());
					представление = "ТаблицаЗначений("+значПараметра.Количество()+")";
					соотвТЗПараметр.Вставить(адрес,представление);
					//новПараметр.ЗначениеПараметра = Новый Структура("Представление,Значение",представление,адрес);
					новПараметр.ЗначениеПараметра = адрес;
				Иначе
					новПараметр.ЗначениеПараметра = строкаПараметра[имяКолонкиЗначения];
				КонецЕсли;
				//ЗаполнитьЗначенияСвойств(новПараметр,строкаПараметра);
				
				//Если ТипЗнч(новПараметр.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				//	новПараметр.Тип = "Список";		
				//Иначе
				//	новПараметр.Тип = "Значение";
				//КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, соотвТЗПараметр);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура вСоздатьНовыйФайлЗапросов()

	Объект.ИмяФайла = "";
	Объект.ИмяПути = "";
	ВызватьПроцедуруМодуляОбъекта("моСохранитьИмяФайла");

	вОчиститьЗначения();
	вУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;

	новСтрока = Объект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	новСтрока.Запрос = "Запросы";
	новСтрока.ТекстЗапроса = "";
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьЗапросыИзФайла()
	
	//Проверим существование файла.
	ФайлЗначения = Новый Файл(Объект.ИмяФайла);
	оповещение = Новый ОписаниеОповещения("вПродолжитьСущестованиеЗагрузитьЗапросыИзФайла",ЭтаФорма);
	ФайлЗначения.НачатьПроверкуСуществования(оповещение); 
	
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьСущестованиеЗагрузитьЗапросыИзФайла(Существует,ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		флагСжиматьФайлы = Объект.ИспользоватьСжатиеФайлов_УФ; 	//на веб-клиенте не работает

		#Если НЕ ВебКлиент Тогда
		Если флагСжиматьФайлы Тогда
			файлАрхива = ПолучитьИмяВременногоФайла("zip");
			архив = Новый ЗаписьZipФайла(файлАрхива,,,,УровеньСжатияZIP.Оптимальный);
			архив.Добавить(Объект.ИмяФайла);
			архив.Записать();
			ДД = Новый ДвоичныеДанные(файлАрхива);
			УдалитьФайлы(файлАрхива);
			вПродолжитьЧтениеЗагрузитьЗапросыИзФайла(ДД);
		Иначе
			ТекстДок = Новый ТекстовыйДокумент;
			оповещение = Новый ОписаниеОповещения("вПродолжитьЧтениеЗагрузитьЗапросыИзФайла",ЭтаФорма,ТекстДок);
			ТекстДок.НачатьЧтение(оповещение,Объект.ИмяФайла);					
		КонецЕсли;
		#Иначе
			ТекстДок = Новый ТекстовыйДокумент;
			оповещение = Новый ОписаниеОповещения("вПродолжитьЧтениеЗагрузитьЗапросыИзФайла",ЭтаФорма,ТекстДок);
			ТекстДок.НачатьЧтение(оповещение,Объект.ИмяФайла);		
		#КонецЕсли
	Иначе
		ПоказатьПредупреждение(,"Файл не обнаружен!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьЧтениеЗагрузитьЗапросыИзФайла(Адрес) Экспорт
	
	рез = вЗагрузитьЗапросыИзФайлаНаСервере(Адрес);
	Если рез.Успех = Истина Тогда
		Модифицированность = Ложь;
		вУстановитьЗаголовокФормы();
		элементыДерева = Объект.ДеревоЗапросов.ПолучитьЭлементы();
		Если элементыДерева.Количество()>0 Тогда
			Элементы.ДеревоЗапросов.Развернуть(элементыДерева[0].ПолучитьИдентификатор());
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,рез.Ошибка);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция вЗагрузитьЗапросыИзФайлаНаСервере(данные)
	
	резВыполнения = Новый Структура("Успех",Истина);
	Если ТипЗнч(данные) = Тип("ТекстовыйДокумент") Тогда
		текстДок = данные; 
	Иначе
		файлАрхива = ПолучитьИмяВременногоФайла("zip");
		данные.Записать(файлАрхива);
		архив = Новый ЧтениеZipФайла(файлАрхива);
		каталог = КаталогВременныхФайлов();
		имяФайла = "";
		Для каждого элАрхива ИЗ архив Цикл
			имяФайла = элАрхива.Имя;
			архив.Извлечь(элАрхива,каталог);		
		КонецЦикла;
		УдалитьФайлы(файлАрхива);
		текстДок = Новый ТекстовыйДокумент;
		текстДок.Прочитать(каталог+имяФайла);
		УдалитьФайлы(каталог+имяФайла);
	КонецЕсли;
	
	Попытка
		ПолученноеЗначение = ЗначениеИзСтрокиВнутр(текстДок.ПолучитьТекст());
	Исключение
		резВыполнения.Вставить("Успех",Ложь);
		резВыполнения.Вставить("Ошибка",ОписаниеОшибки());
		Возврат резВыполнения;
	КонецПопытки;
	текОбъект = РеквизитФормыВЗначение("Объект");
	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
		элементы = текОбъект.ДеревоЗапросов.Строки;
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			элементы.Очистить();		
			НовСтрока = элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаВремТаблицы);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		имяКолонкиЗначения = "ЗначениеПараметра";
		Если ПолученноеЗначение.Колонки.Найти("ЗначениеПараметра")=Неопределено Тогда
			имяКолонкиЗначения = "Значение";
		КонецЕсли;
		соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, текОбъект.ДеревоЗапросов,соотвТЗПараметр);
		ПоместитьВоВременноеХранилище(соотвТЗПараметр,уфПредставленияТаблицПараметров);
	Иначе
		резВыполнения.Вставить("Успех",Ложь);
		резВыполнения.Вставить("Ошибка","Не удалось прочитать содержимое файла.");
		Возврат резВыполнения;
	КонецЕсли;		
	
	ЗначениеВРеквизитФормы(текОбъект,"Объект");
	
	Возврат резВыполнения;
	
КонецФункции

&НаКлиенте
Процедура вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь, ТекстВызоваЗавершения="")
	
	вСохранитьЗапросТекущейСтроки();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстВызоваЗавершения",ТекстВызоваЗавершения);	
	ДополнительныеПараметры.Вставить("ЗапрашиватьИмяФайла",ЗапрашиватьИмяФайла);
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				мФлагСохранения = Истина;
				вВыполнитьПоИмени(ТекстВызоваЗавершения);
				Возврат;
			Иначе
				оповещение = Новый ОписаниеОповещения("вПродолжитьВопросСохранитьЗапросыВФайл",ЭтаФорма,ДополнительныеПараметры);
				ПоказатьВопрос(оповещение,"Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	вПродолжитьВопросСохранитьЗапросыВФайл(КодВозвратаДиалога.Да,ДополнительныеПараметры); 	//сливаем ветки

КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьВопросСохранитьЗапросыВФайл(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		мФлагСохранения = Ложь;
		вВыполнитьПоИмени(ДополнительныеПараметры.ТекстВызоваЗавершения);
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		мФлагСохранения = Истина;
		вВыполнитьПоИмени(ДополнительныеПараметры.ТекстВызоваЗавершения);
		Возврат;
	КонецЕсли;
	
	//вариант ДА
	Если ПустаяСтрока(Объект.ИмяФайла) Или ДополнительныеПараметры.ЗапрашиватьИмяФайла Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.ПолноеИмяФайла = Объект.ИмяФайла;
		Длг.Каталог = Объект.ИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		оповещение = Новый ОписаниеОповещения("вПродолжитьВыборФайлаСохранитьЗапросыВФайл",ЭтаФорма,ДополнительныеПараметры.ТекстВызоваЗавершения);
		Длг.Показать(оповещение);
		Возврат;
		
	КонецЕсли;
	
	вПродолжитьВыборФайлаСохранитьЗапросыВФайл(Истина,ДополнительныеПараметры.ТекстВызоваЗавершения);   //сливаем ветки
	
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьВыборФайлаСохранитьЗапросыВФайл(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		мФлагСохранения = Ложь;
		вВыполнитьПоИмени(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		файл = Новый Файл(ВыбранныеФайлы[0]);
		Объект.ИмяФайла = файл.ПолноеИмя;
		Объект.ИмяПути = файл.Путь;
	КонецЕсли;
	
	флагСжиматьФайлы = Объект.ИспользоватьСжатиеФайлов_УФ;	//на веб-клиенте не работает
	
	#Если НЕ ВебКлиент Тогда
	Если флагСжиматьФайлы Тогда
		ДД = вЗаписатьВФайлСохранитьЗапросыВФайлНаСервере(Истина);
		файлАрхива = ПолучитьИмяВременногоФайла("zip");
		ДД.Записать(файлАрхива);
		архив = Новый ЧтениеZipФайла(файлАрхива);
		Для каждого элАрхива ИЗ архив Цикл
			архив.Извлечь(элАрхива,Объект.ИмяПути);		
		КонецЦикла;
		УдалитьФайлы(файлАрхива);
		вПродолжитьЗаписьФайлаСохранитьЗапросыВФайл(Истина,ДополнительныеПараметры);
	Иначе
		сохраняемыйТекст = вЗаписатьВФайлСохранитьЗапросыВФайлНаСервере();
		текстДок = Новый ТекстовыйДокумент;
		текстДок.УстановитьТекст(сохраняемыйТекст);
		оповещение = Новый ОписаниеОповещения("вПродолжитьЗаписьФайлаСохранитьЗапросыВФайл",ЭтаФорма,ДополнительныеПараметры);
		текстДок.НачатьЗапись(оповещение,Объект.ИмяФайла);
	КонецЕсли
	#Иначе
	сохраняемыйТекст = вЗаписатьВФайлСохранитьЗапросыВФайлНаСервере();
	текстДок = Новый ТекстовыйДокумент;
	текстДок.УстановитьТекст(сохраняемыйТекст);
	оповещение = Новый ОписаниеОповещения("вПродолжитьЗаписьФайлаСохранитьЗапросыВФайл",ЭтаФорма,ДополнительныеПараметры);
	текстДок.НачатьЗапись(оповещение,Объект.ИмяФайла);
	#КонецЕсли	
	
КонецПроцедуры

&НаСервере
Функция вЗаписатьВФайлСохранитьЗапросыВФайлНаСервере(Архивировать=Ложь)
	
	текОбъект = РеквизитФормыВЗначение("Объект");
	деревоКЗаписи = Новый ДеревоЗначений;
	деревоКЗаписи.Колонки.Добавить("Запрос",Новый ОписаниеТипов("Строка"));
	деревоКЗаписи.Колонки.Добавить("ТекстЗапроса",Новый ОписаниеТипов("Строка"));
	деревоКЗаписи.Колонки.Добавить("СпособВыгрузки",Новый ОписаниеТипов("Строка"));     			//Для совместимости
	деревоКЗаписи.Колонки.Добавить("ПараметрыЗапроса",Новый ОписаниеТипов("ТаблицаЗначений"));
	вПодготовитьДеревоКЗаписи(текОбъект.ДеревоЗапросов,деревоКЗаписи);
	текстДляСохранения = ЗначениеВСтрокуВнутр(деревоКЗаписи);
	Если Архивировать Тогда
		текстДок = Новый ТекстовыйДокумент;
		текстДок.УстановитьТекст(ЗначениеВСтрокуВнутр(деревоКЗаписи));
		каталог = КаталогВременныхФайлов();
		имяФайла = Сред(текОбъект.ИмяФайла,СтрДлина(текОбъект.ИмяПути)+1);
		файлЗапроса = каталог+имяФайла;
		текстДок.Записать(файлЗапроса);
		файлАрхива = ПолучитьИмяВременногоФайла("zip");
		архив = Новый ЗаписьZipФайла(файлАрхива,,,,УровеньСжатияZIP.Оптимальный);
		архив.Добавить(файлЗапроса);
		архив.Записать();		
		ДД = Новый ДвоичныеДанные(файлАрхива);
		УдалитьФайлы(файлЗапроса);
		УдалитьФайлы(файлАрхива);
		Возврат ДД;
	Иначе
		Возврат ЗначениеВСтрокуВнутр(деревоКЗаписи);
	КонецЕсли;

КонецФункции

&НаСервере
Процедура вПодготовитьДеревоКЗаписи(ИсходноеДерево, НовоеДерево)
	
	НовоеДерево.Строки.Очистить();

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Запрос = СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса = СтрокаДерева.ТекстЗапроса;
		
		НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка"));
		НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
		НоваяСтрока.ПараметрыЗапроса.Колонки.Добавить("ЭтоВыражение",Новый ОписаниеТипов("Булево")); 					//для совместимости

		Для каждого строкаПараметра Из СтрокаДерева.ПараметрыЗапроса Цикл
			новПараметр = НоваяСтрока.ПараметрыЗапроса.Добавить();			
			новПараметр.ИмяПараметра = строкаПараметра.ИмяПараметра;
			новПараметр.ЭтоВыражение = Ложь;
			значПараметра = строкаПараметра.ЗначениеПараметра;
			Если ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда
			//Если ТипЗнч(значПараметра) = Тип("Структура") Тогда
				новПараметр.ЗначениеПараметра = ПолучитьИзВременногоХранилища(значПараметра);
			Иначе
				новПараметр.ЗначениеПараметра = значПараметра;
			КонецЕсли;
		КонецЦикла;
		вПодготовитьДеревоКЗаписи(СтрокаДерева, НоваяСтрока);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьЗаписьФайлаСохранитьЗапросыВФайл(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		мФлагСохранения = Ложь;
		вВыполнитьПоИмени(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;	
	ВызватьПроцедуруМодуляОбъекта("моСохранитьИмяФайла");
	вУстановитьЗаголовокФормы();
	мФлагСохранения = Истина;
	вВыполнитьПоИмени(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура вЗагрузитьРезультат(пРезЗапроса,ВыполняемыйТекстЗапроса)
	
	Если пРезЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	вОчиститьТаблицы();
	РезультатТаблица.Очистить();
	РезультатДерево.ПолучитьЭлементы().Очистить();
	мТаблицаОписанияДерева.Очистить();
	
	тзРезультат = Новый ТаблицаЗначений;
	этоДерево = Ложь;
	Если ТипЗнч(пРезЗапроса) = Тип("Массив") Тогда                           		
		Если мТаблицыЗапроса.Количество() = 0 Тогда                          //Выполнить пакет
			тзРезультат.Колонки.Добавить("РезультатЗапроса",Новый ОписаниеТипов("ТаблицаЗначений"));
			Для каждого ЭлемМассива Из пРезЗапроса Цикл
				НовСтрока = тзРезультат.Добавить();
				Если ЭлемМассива<>Неопределено Тогда
					тзЭлемент = ЭлемМассива.Выгрузить();
					НовСтрока.РезультатЗапроса = тзЭлемент;
				Иначе
					НовСтрока.РезультатЗапроса = Неопределено;
				КонецЕсли;
			КонецЦикла;
		Иначе                                                                //Просмотр ВТ
			тзРезультат.Колонки.Добавить("РезультатЗапроса",Новый ОписаниеТипов("ТаблицаЗначений"));
			тзРезультат.Колонки.Добавить("НаименованиеТаблицы",,"Наименование таблицы");
			Для каждого строкаТЗ ИЗ мТаблицыЗапроса Цикл
				НовСтрока = тзРезультат.Добавить();
				тзЭлемент = пРезЗапроса[строкаТЗ.ИндексВРезультате].Выгрузить();
				НовСтрока.РезультатЗапроса = тзЭлемент;
				НовСтрока.НаименованиеТаблицы = строкаТЗ.ИмяТаблицы;
			КонецЦикла;
		КонецЕсли;
	Иначе																	 //Выполнить запрос
		этоДерево = ПроверитьВозможностьВыводаДерева(пРезЗапроса,ВыполняемыйТекстЗапроса,тзРезультат);
		Если этоДерево Тогда	
		Иначе
			тзРезультат = пРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;
	КонецЕсли;
	
	Если Не этоДерево Тогда
		ОбработатьТЗПередВыводом(тзРезультат);
		ВывестиТЗнаФормуПрограммно(тзРезультат,"РезультатТаблица","РезультатТаблица");		
	Иначе
		ОбработатьДЗПередВыводом(тзРезультат);
		ВывестиТЗнаФормуПрограммно(тзРезультат,"РезультатДерево","РезультатДерево");
		СоздатьОписаниеДерева(РезультатДерево);
	КонецЕсли;
	
	Элементы.РезультатДерево.Видимость = этоДерево;
	Элементы.РезультатТаблица.Видимость = Не этоДерево;
		
КонецПроцедуры

&НаКлиенте
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока)
	
	ЗаполнитьСтрокуДереваИзСтроки(ДобСтрока,ТекСтрока);
	
	Для Каждого Строка Из ТекСтрока.ПолучитьЭлементы() Цикл
		НоваяСтрока = ДобСтрока.ПолучитьЭлементы().Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура вОбработкаАвтосохранения()
	Если Объект.ИспользоватьАвтосохранение И Объект.ИнтервалАвтосохранения>0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикАвтосохранения", Объект.ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикАвтосохранения");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура вОбработкаБэкапаЗапросов()
	Если Объект.ИспользоватьБэкапЗапросов Тогда
		файлБэкапа = Новый Файл(мИмяФайлаБэкапаЗапросов);
		оповещение = Новый ОписаниеОповещения("вПродолжитьОбработкаБэкапаЗапросов",ЭтаФорма);
		файлБэкапа.НачатьПроверкуСуществования(оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьОбработкаБэкапаЗапросов(Существует,ДополнительныеПараметры) Экспорт
	Если Существует = Истина Тогда
		ТекстДок = Новый ТекстовыйДокумент;
		оповещение = Новый ОписаниеОповещения("вПродолжитьЧтениеОбработкаБэкапаЗапросов",ЭтаФорма,ТекстДок);
		ТекстДок.НачатьЧтение(оповещение,мИмяФайлаБэкапаЗапросов);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПродолжитьЧтениеОбработкаБэкапаЗапросов(ДополнительныеПараметры) Экспорт
	вЗагрузитьЗапросыИзФайлаНаСервере(ДополнительныеПараметры);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура вБэкапЗапросаПередВыполнением()
	Если Объект.ИспользоватьБэкапЗапросов И Модифицированность Тогда
		сохраняемыйТекст = вЗаписатьВФайлСохранитьЗапросыВФайлНаСервере();
		текстДок = Новый ТекстовыйДокумент;
		текстДок.УстановитьТекст(сохраняемыйТекст);
		текстДок.НачатьЗапись(,мИмяФайлаБэкапаЗапросов);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчисткаБэкапаЗапросаПослеВыполнения()
	Если Объект.ИспользоватьБэкапЗапросов И Модифицированность Тогда
		НачатьУдалениеФайлов(,мИмяФайлаБэкапаЗапросов);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура вСохранитьНастройки()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.моСохранитьНастройки();		
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

	ЗаполнитьСтрокуДереваИзСтроки(НоваяСтрока,Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ОбрезатьСообщениеОбОшибке(сообщение)
	резСообщение = сообщение;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;
	индРазделителя = Найти(резСообщение,":");	
	Если индРазделителя>0 Тогда
		резСообщение = Сред(резСообщение,индРазделителя+2);	
	КонецЕсли;

	Возврат резСообщение;
КонецФункции

&НаСервере
Процедура вОчиститьТаблицы()
	
	Если РезультатТаблица.Количество()>0 Тогда
		тзРезультат = РеквизитФормыВЗначение("РезультатТаблица");
		Для каждого колонка Из тзРезультат.Колонки Цикл
			Если Найти(колонка.Имя,"__СлужебныйРасшифровка__")<>0 Тогда
				Для каждого строкаТЗ Из тзРезультат Цикл
					Если ЗначениеЗаполнено(строкаТЗ[колонка.Имя]) Тогда
						УдалитьИзВременногоХранилища(строкаТЗ[колонка.Имя]);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатДерево.ПолучитьЭлементы().Количество()>0 Тогда
		тзРезультат = РеквизитФормыВЗначение("РезультатДерево");
		Для каждого колонка Из тзРезультат.Колонки Цикл
			Если Найти(колонка.Имя,"__СлужебныйРасшифровка__")<>0 Тогда
				Для каждого строкаОписания Из мТаблицаОписанияДерева Цикл
					строкаТЗ = РезультатДерево.НайтиПоИдентификатору(строкаОписания.СтрокаДерева);
					Если ЗначениеЗаполнено(строкаТЗ[колонка.Имя]) Тогда
						УдалитьИзВременногоХранилища(строкаТЗ[колонка.Имя]);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстПараметра(пЗначениеПараметра)
	
	типПараметра = ТипЗнч(пЗначениеПараметра);
	
	текстПараметр = "";
	Если типПараметра = Тип("Строка") Тогда
		текстПараметр = """"+пЗначениеПараметра+"""";
	ИначеЕсли типПараметра = Тип("Число") Тогда
		текстПараметр = Формат(пЗначениеПараметра,"ЧГ=0");
	ИначеЕсли типПараметра = Тип("Булево") Тогда
		текстПараметр = Формат(пЗначениеПараметра,"ДФ=yyyyMMdd; БЛ=Ложь; БИ=Истина");
	ИначеЕсли типПараметра = Тип("Дата") Тогда
		текстПараметр = "Дата("""+Формат(пЗначениеПараметра,"ДФ=yyyyMMdd")+""")";
	ИначеЕсли пЗначениеПараметра = Неопределено Тогда
		текстПараметр = "Неопределено";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(текстПараметр) Тогда Возврат текстПараметр; КонецЕсли;  	//для примитивных типов
	
	тзМенеджеры = Новый ТаблицаЗначений;
	тзМенеджеры.Колонки.Добавить("Менеджер");
	тзМенеджеры.Колонки.Добавить("ИмяМенеджера");
	тзМенеджеры.Колонки.Добавить("ЕстьНомер");
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Справочники;
	новСтрока.ИмяМенеджера = "Справочники";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Документы;
	новСтрока.ИмяМенеджера = "Документы";
	новСтрока.ЕстьНомер = Истина;	
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = БизнесПроцессы;
	новСтрока.ИмяМенеджера = "БизнесПроцессы";
	новСтрока.ЕстьНомер = Истина;	
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Задачи;
	новСтрока.ИмяМенеджера = "Задачи";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();	
	новСтрока.Менеджер = ПланыВидовРасчета;
	новСтрока.ИмяМенеджера = "ПланыВидовРасчета";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовХарактеристик;
	новСтрока.ИмяМенеджера = "ПланыВидовХарактеристик";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыСчетов;
	новСтрока.ИмяМенеджера = "ПланыСчетов";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыОбмена;
	новСтрока.ИмяМенеджера = "ПланыОбмена";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Перечисления;
	новСтрока.ИмяМенеджера = "Перечисления";
	новСтрока.ЕстьНомер = "Перечисления";

	метаПараметра = пЗначениеПараметра.Метаданные();
	этоПредопределенный = Ложь;
	Попытка
		этоПредопределенный = пЗначениеПараметра.Предопределенный;
	Исключение
	КонецПопытки;
	
	Для каждого строкаМенеджера Из тзМенеджеры Цикл
		Если строкаМенеджера.Менеджер.ТипВсеСсылки().СодержитТип(типПараметра) Тогда
			Если этоПредопределенный Тогда
				имяПредопределенного = строкаМенеджера.Менеджер[метаПараметра.Имя].ПолучитьИмяПредопределенного(пЗначениеПараметра);
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+"."+имяПредопределенного;
			ИначеЕсли Не ЗначениеЗаполнено(пЗначениеПараметра) Тогда
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".ПустаяСсылка()";		
			ИначеЕсли строкаМенеджера.ЕстьНомер = "Перечисления" Тогда
				индексЗначенияПеречисления = Перечисления[метаПараметра.Имя].Индекс(пЗначениеПараметра);
				имяЗначения = Метаданные.Перечисления[метаПараметра.Имя].ЗначенияПеречисления[индексЗначенияПеречисления].Имя;
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+"."+имяЗначения;
			ИначеЕсли строкаМенеджера.ЕстьНомер = Истина Тогда
				периодичностьНомера = Ложь;
				Если строкаМенеджера.ИмяМенеджера = "Документы" ИЛИ строкаМенеджера.ИмяМенеджера = "БизнесПроцессы" Тогда 
					периодичностьНомера = ?(метаПараметра.ПериодичностьНомера = "Непериодический",Ложь,Истина);
				КонецЕсли;
				Если периодичностьНомера Тогда
					периодПараметр = пЗначениеПараметра.Дата;
					Если Строка(метаПараметра.ПериодичностьНомера) = "Год" Тогда
						периодПараметр = НачалоГода(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Квартал" Тогда
						периодПараметр = НачалоКвартала(периодПараметр);						
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Месяц" Тогда
						периодПараметр = НачалоМесяца(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "День" Тогда
						периодПараметр = НачалоДня(периодПараметр);
					КонецЕсли;
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("""+СокрЛП(пЗначениеПараметра.Номер)
						+""",Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")
						+",Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					КонецЕсли;
				Иначе
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("""+СокрЛП(пЗначениеПараметра.Номер)+""")";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")+")";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли метаПараметра.ДлинаКода>0 Тогда
				Если Строка(метаПараметра.ТипКода) = "Строка" Тогда
					текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоКоду("""+СокрЛП(пЗначениеПараметра.Код)+""")";
				Иначе
					текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоКоду("+Формат(пЗначениеПараметра.Код,"ЧГ=0")+")";
				КонецЕсли;
			Иначе
				текстПараметр = строкаМенеджера.ИмяМенеджера+"."+метаПараметра.Имя+".НайтиПоНаименованию("""+СокрЛП(пЗначениеПараметра.Наименование)+""")";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
				
	Возврат текстПараметр;
	
КонецФункции

&НаКлиенте
Процедура вВыполнитьПоИмени(имяПроцедуры)
	
	Если имяПроцедуры = "НовыйФайл(Неопределено)" Тогда
		НовыйФайл(Неопределено);
	ИначеЕсли имяПроцедуры = "ОткрытьФайл(Неопределено)" Тогда
		ОткрытьФайл(Неопределено);
	ИначеЕсли имяПроцедуры = "Закрыть()" Тогда
		Закрыть();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеХЗ(адрес)
	Если Не ЗначениеЗаполнено(адрес) Тогда
		Возврат адрес;
	КонецЕсли;	
	хз = ПолучитьИзВременногоХранилища(адрес);
	Если ТипЗнч(хз) = Тип("ТаблицаЗначений") Тогда
		Возврат "ТаблицаЗначений";  
	ИначеЕсли ТипЗнч(хз)<>Тип("ХранилищеЗначения") Тогда
		Возврат хз;	
	КонецЕсли;
	содержимое = хз.Получить();
	Если ТипЗнч(содержимое) = Тип("ТаблицаЗначений") Тогда
		ПоместитьВоВременноеХранилище(содержимое,адрес);
		содержимое = "ТаблицаЗначений";
	КонецЕсли;
	Возврат содержимое;
КонецФункции

&НаСервере
Функция ОбработатьТЗПередВыводом(пТаблица)
	
	Для каждого колонка ИЗ пТаблица.Колонки Цикл
		Если колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			индКолонки = пТаблица.Колонки.Индекс(колонка);
			имяКолонки = колонка.Имя;
			имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
			пТаблица.Колонки.Добавить(имяКолонкиРасшифровки,Новый ОписаниеТипов("Строка"));
			массивПредставлений = Новый Массив;
			Для каждого строкаТЗ Из пТаблица Цикл
				тзРезультат = строкаТЗ[имяКолонки];
				Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
					адрес = ПоместитьВоВременноеХранилище(тзРезультат,Новый УникальныйИдентификатор());
					строкаТЗ[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ТаблицаЗначений("+тзРезультат.Количество()+")");
				ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
					значениеХЗ = тзРезультат.Получить();
					адрес = ПоместитьВоВременноеХранилище(значениеХЗ,Новый УникальныйИдентификатор());
					строкаТЗ[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ХранилищеЗначения("+ТипЗнч(значениеХЗ)+")");
				Иначе
					массивПредставлений.Добавить("");
					строкаТЗ[имяКолонкиРасшифровки] = строкаТЗ[имяКолонки];
				КонецЕсли;
			КонецЦикла;
			пТаблица.Колонки.Удалить(колонка);
			пТаблица.Колонки.Вставить(индКолонки,имяКолонки,Новый ОписаниеТипов("Строка"),имяКолонки);
			пТаблица.ЗагрузитьКолонку(массивПредставлений, имяКолонки);
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

&НаСервере
Процедура ОбработатьДЗПередВыводом(пДерево)
	
	Если пДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	пМассивКолонок = Новый Массив;
	Для каждого колонка ИЗ пДерево.Колонки Цикл
		Если колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			пМассивКолонок.Добавить(колонка);
			индКолонки = пДерево.Колонки.Индекс(колонка);
			имяКолонки = колонка.Имя;
			имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
			пДерево.Колонки.Добавить(имяКолонкиРасшифровки,Новый ОписаниеТипов("Строка"));
			имяКолонкиПредставления = имяКолонки+"__СлужебныйПредставление__";
			пДерево.Колонки.Добавить(имяКолонкиПредставления,Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;	

	ОписаниеДерева = Новый Массив;
	текСтроки = пДерево.Строки;
	Пока Истина Цикл
		Если текСтроки.Количество() = 0 Тогда
		 	Прервать;
		КонецЕсли;
		массивКРазвороту = Новый Массив;
		Для каждого строкаДерева Из текСтроки Цикл
			КолвоПодчиненных = 0;
			Для каждого строкаПодчиненная Из строкаДерева.Строки Цикл
				массивКРазвороту.Добавить(строкаПодчиненная);
				КолвоПодчиненных = КолвоПодчиненных + 1;
			КонецЦикла;
			ОписаниеДерева.Добавить(Новый Структура("СтрокаДерева,КолвоПодчиненных",строкаДерева,КолвоПодчиненных));
		КонецЦикла;
		текСтроки = массивКРазвороту;    
	КонецЦикла;
	
	Для каждого колонка ИЗ пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		имяКолонкиРасшифровки = имяКолонки+"__СлужебныйРасшифровка__";
		имяКолонкиПредставления = имяКолонки+"__СлужебныйПредставление__";
		
		Для каждого строкаОписания Из ОписаниеДерева Цикл
			Если строкаОписания.КолвоПодчиненных = 0 Тогда
				Продолжить;	
			КонецЕсли;
			массивПредставлений = Новый Массив;
			Для каждого строкаДерева ИЗ строкаОписания.СтрокаДерева.Строки Цикл
				тзРезультат = строкаДерева[имяКолонки];
				Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
					адрес = ПоместитьВоВременноеХранилище(тзРезультат,Новый УникальныйИдентификатор());
					строкаДерева[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ТаблицаЗначений("+тзРезультат.Количество()+")");
				ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
					значениеХЗ = тзРезультат.Получить();
					адрес = ПоместитьВоВременноеХранилище(значениеХЗ,Новый УникальныйИдентификатор());
					строкаДерева[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ХранилищеЗначения("+ТипЗнч(значениеХЗ)+")");
				Иначе
					массивПредставлений.Добавить("");
					строкаДерева[имяКолонкиРасшифровки] = строкаДерева[имяКолонки];
				КонецЕсли;			
			КонецЦикла;
			строкаОписания.СтрокаДерева.Строки.ЗагрузитьКолонку(массивПредставлений, имяКолонкиПредставления);
		КонецЦикла;	
	КонецЦикла;
	
	Для каждого колонка ИЗ пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		пДерево.Колонки.Удалить(колонка);
		пДерево.Колонки[имяКолонки+"__СлужебныйПредставление__"].Имя = имяКолонки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыводаДерева(пРезЗапроса,ВыполняемыйТекстЗапроса,пДерево)
	Если Найти(ВРег(ВыполняемыйТекстЗапроса),"ИТОГИ")=0 Тогда		//точно не дерево
		Возврат Ложь;	
	КонецЕсли;
	пДерево = пРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого строкаКорня Из пДерево.Строки Цикл
		Если строкаКорня.Строки.Количество()>0 Тогда    //точно дерево
			Возврат Истина;									
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;										//все-таки не дерево
КонецФункции

&НаСервере
Процедура СоздатьОписаниеДерева(пДеревоДФ)
	
	мТаблицаОписанияДерева.Очистить();
	
	текСтроки = пДеревоДФ.ПолучитьЭлементы();
	текУровень = 0;
	Пока Истина Цикл
		Если текСтроки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		массивСтрок = Новый Массив;
		Для каждого строкаДерева Из текСтроки Цикл
			новСтрока = мТаблицаОписанияДерева.Добавить();
			новСтрока.СтрокаДерева = строкаДерева.ПолучитьИдентификатор();
			новСтрока.Уровень = текУровень;			 
			колвоПодчиненных = 0;
			Для каждого строкаПодчиненная Из строкаДерева.ПолучитьЭлементы() Цикл
				массивСтрок.Добавить(строкаПодчиненная);
				колвоПодчиненных = колвоПодчиненных + 1;
			КонецЦикла;
			новСтрока.КолвоПодчиненных = колвоПодчиненных;
		КонецЦикла;
		текСтроки = массивСтрок;
		текУровень = текУровень + 1;
	КонецЦикла;
	мТаблицаОписанияДерева.Сортировать("Уровень Убыв");
		
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоУровня(Уровень)
	
	Для каждого строкаОписания Из мТаблицаОписанияДерева Цикл
		Если строкаОписания.КолвоПодчиненных = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Уровень = Неопределено ИЛИ строкаОписания.Уровень<Уровень Тогда
			Если НЕ Элементы.РезультатДерево.Развернут(строкаОписания.СтрокаДерева) Тогда
				Элементы.РезультатДерево.Развернуть(строкаОписания.СтрокаДерева,Ложь);
			КонецЕсли;
		Иначе
			Если Элементы.РезультатДерево.Развернут(строкаОписания.СтрокаДерева) Тогда
				Элементы.РезультатДерево.Свернуть(строкаОписания.СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция СобратьРаскрашенныйЗапросHTML(пТокены)

	резМассив = Новый массив;
	резМассив.Добавить("<html>
	|<style>
	|body {
    |font: normal 13px Courier New;
	|}
	|</style>");
	резМассив.Добавить(Символы.ПС);
	
	ключевыеСлова 	= "|РАЗРЕШЕННЫЕ|ВЫБРАТЬ|РАЗЛИЧНЫЕ|ПЕРВЫЕ|ИЗ|ГДЕ|КАК|УПОРЯДОЧИТЬ|ПО|АВТОУПОРЯДОЧИВАНИЕ|СГРУППИРОВАТЬ|ИТОГИ|ОБЩИЕ|ЛЕВОЕ|ПРАВОЕ|ПОЛНОЕ|ВНЕШНЕЕ|ВНУТРЕННЕЕ|СОЕДИНЕНИЕ|УБЫВ|ВОЗР|ИМЕЮЩИЕ|ОБЪЕДИНИТЬ|ВСЕ|ДЛЯ|ИЗМЕНЕНИЯ|ПОМЕСТИТЬ|ИНДЕКСИРОВАТЬ|УНИЧТОЖИТЬ|БУЛЕВО|ЧИСЛО|ТОЛЬКО|ИЕРАРХИЯ|ПЕРИОДАМИ|ALLOWED|SELECT|DESTINCT|TOP|FROM|WHERE|AS|ORDER|BY|AUTOORDER|GROUP|TOTALS|OVERALL|LEFT|RIGHT|FULL|OUTER|INNER|JOIN|ON|DESC|ASK|HAVING|UNION|ALL|FOR|UPDATE|OF|INTO|INDEX|DROP|BOOLEAN|NUMBER|ONLY|HIERARCHY|PERIODS|";
	вспомСлова 		= "|ПРЕДСТАВЛЕНИЕССЫЛКИ|ДОБАВИТЬКДАТЕ|РАЗНОСТЬДАТ|И|ИЛИ|НЕ|ИСТИНА|ЛОЖЬ|NULL|НЕОПРЕДЕЛЕНО|МЕЖДУ|В|ИЕРАРХИИ|ССЫЛКА|ЕСТЬ|ПОДОБНО|СПЕЦСИМВОЛ|СУММА|МАКСИМУМ|МИНИМУМ|СРЕДНЕЕ|КОЛИЧЕСТВО|ДАТАВРЕМЯ|ПОДСТРОКА|ГОД|МЕСЯЦ|ДЕНЬ|ЧАС|МИНУТА|СЕКУНДА|КВАРТАЛ|НЕДЕЛЯ|ДЕНЬГОДА|ДЕНЬНЕДЕЛИ|НАЧАЛОПЕРИОДА|КОНЕЦПЕРИОДА|ЕСТЬNULL|ВЫБОР|КОГДА|ТОГДА|ИНАЧЕ|КОНЕЦ|ВЫРАЗИТЬ|ЗНАЧЕНИЕ|ПРЕДСТАВЛЕНИЕ|OR|AND|NOT|TRUE|FALSE|UNDIFENED|BETWEEN|IN|HIERARCHY|REF|IS|LIKE|ESCAPE|SUM|MAX|MIN|AVD|COUNT|DATATIME|SUBSTRING|YEAR|MOUNT|DAY|HOUR|MINUTE|SECOND|QUARTER|WEEK|DAYYEAR|DAYWEEK|BEGINOFPERIOD|ENDOFPERIOD|ISNULL|CASE|WHEN|THEN|ELSE|END|CAST|VALUE|PRESENTATION|";
	Цифры			= "0123456789";
	Знаки			= "(),<>={}*";
	цветСтрока 		= "<span style='color: #ff0000;'>";
	цветКоммент 	= "<span style='color: #008000;'>";
	цветПараметр 	= "<span style='color: #008080;'>";
	цветКлючСлово 	= "<span style='color: #0000ff;'>";
	цветВспомСлово 	= "<span style='color: #800000;'>";
	цветЧисло 		= "<span style='color: #ff00ff;'>";
	цветТочкаСЗап 	= "<span style='color: #ff0000;'>";
	цветЗнаки 		= "<span style='color: #0000ff;'>";
	
	Для каждого токен Из пТокены Цикл
		первыйСимвол = Лев(токен,1);
		Если токен = " " Тогда
			резМассив.Добавить("&nbsp;");
		ИначеЕсли токен = Символы.Таб Тогда
			резМассив.Добавить("&nbsp;&nbsp;&nbsp;&nbsp;");
		ИначеЕсли токен = Символы.ПС Тогда
			резМассив.Добавить("<br>");
			резМассив.Добавить(Символы.ПС);
		ИначеЕсли Найти(вспомСлова,"|"+токен+"|") Тогда        //Вспом. слово
			резМассив.Добавить(цветВспомСлово);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");	
		ИначеЕсли Найти(ключевыеСлова,"|"+токен+"|") Тогда     //Ключевое слово
			резМассив.Добавить(цветКлючСлово);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");
		ИначеЕсли Найти(Знаки,токен) Тогда
			резМассив.Добавить(цветЗнаки);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");
		ИначеЕсли первыйСимвол = """" Тогда						//Строка
			резМассив.Добавить(цветСтрока);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");
		ИначеЕсли первыйСимвол = "&" Тогда      				//Параметр
			резМассив.Добавить(цветПараметр);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");
		ИначеЕсли токен = ";" Тогда
			резМассив.Добавить(цветТочкаСЗап);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");	
		ИначеЕсли Найти(Цифры,первыйСимвол) Тогда
			резМассив.Добавить(цветЧисло);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");
		ИначеЕсли первыйСимвол = "/" И Лев(токен,2)="//" Тогда	//Коммент
			резМассив.Добавить(цветКоммент);
			резМассив.Добавить(токен);
			резМассив.Добавить("</span>");	
		Иначе
			резМассив.Добавить(токен);
		КонецЕсли;
	КонецЦикла;
	
	резМассив.Добавить(Символы.ПС);
	резМассив.Добавить("</html>");
	
	Возврат СцепитьМассивВЕдинуюСтроку(резМассив);
	
КонецФункции

&НаСервереБезКонтекста
Функция СцепитьМассивВЕдинуюСтрокуНаСервере(пМассив)
	рез = Сред(СтрЗаменить(ЗначениеВСтрокуВнутр(пМассив), """}," + Символы.ПС + "{""S"",""", ""), 53 + СтрДлина(Формат(пМассив.Количество(), "ЧГ=")));
	рез = Лев(рез,СтрДлина(рез)-6);
	Возврат СтрЗаменить(рез,"""""",""""); 
КонецФункции

&НаКлиенте
Функция СцепитьМассивВЕдинуюСтроку(пМассив)
	рез = "";
	Шаг = 2;
	колвоВсего = пМассив.Количество();
	Пока Шаг<колвоВсего Цикл
		инд = 0;	
		Пока инд < колвоВсего Цикл
			Если инд+Шаг/2<колвоВсего Тогда
				пМассив[инд] = пМассив[инд] + пМассив[инд+Шаг/2];
			КонецЕсли;
			инд = инд + Шаг;		
		КонецЦикла;
		Шаг = Шаг*2;
	КонецЦикла;
	Возврат пМассив[0]+пМассив[Шаг/2]; 
КонецФункции

&НаКлиенте
Функция РаскраситьТекстЗапроса(пТекст)
	токены = ТокенизироватьЗапрос(пТекст);
	раскрашенныйТекст = СобратьРаскрашенныйЗапросHTML(токены);
	Возврат раскрашенныйТекст;
КонецФункции

&НаКлиенте
Функция ТокенизироватьЗапрос(пТекстЗапроса,УдалятьРазделители = Ложь)
	длинаЗапроса = СтрДлина(пТекстЗапроса);
	
	терминалы = "+-*/,;<>=(){}";
	разделители = " "+Символы.ПС+Символы.Таб;
	состояние = "";
	токены = Новый Массив;
	токен = "";
	Для инд = 1 По длинаЗапроса Цикл
		символ = Сред(пТекстЗапроса,инд,1);
		Если состояние = "Строка" Тогда
			токен = токен + символ;
			Если символ = """" Тогда
				состояние = "";				
				токены.Добавить(токен);
				токен = "";
			КонецЕсли;
		ИначеЕсли состояние = "Комментарий" Тогда			
			Если символ=Символы.ПС Тогда
				состояние = "";
				токены.Добавить(токен);
				токены.Добавить(Символы.ПС);
				токен = "";
			Иначе
				токен = токен + символ;
			КонецЕсли;
		Иначе	//основное состояние
			Если символ="""" Тогда
				состояние = "Строка";
				токен = токен + символ;
			ИначеЕсли символ="/" И Сред(пТекстЗапроса,инд+1,1)="/" Тогда
				Если токен<>"" Тогда
					токены.Добавить(токен);
					токен = "";
				КонецЕсли;
				состояние = "Комментарий";
				токен = токен + символ;
			ИначеЕсли Найти(терминалы,символ)>0 Тогда
				Если токен<>"" Тогда
					токены.Добавить(токен);
					токен = "";
				КонецЕсли;
			    токены.Добавить(символ);
			ИначеЕсли Найти(разделители,символ)>0 Тогда
				Если токен<>"" Тогда
					токены.Добавить(токен);
					токен = "";
				КонецЕсли;
				Если НЕ УдалятьРазделители Тогда
					токены.Добавить(символ);	
				КонецЕсли;
			Иначе
				токен = токен + символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(токен) Тогда
		токены.Добавить(токен);
	КонецЕсли;
	
	Возврат токены;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура НовыйФайл(Команда)
	
	Если мФлагСохранения = Неопределено Тогда
		вСохранитьЗапросыВФайл(Истина,,"НовыйФайл(Неопределено)");
	ИначеЕсли мФлагСохранения = Истина Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
	
	мФлагСохранения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если мФлагСохранения = Неопределено Тогда
		вСохранитьЗапросыВФайл(Истина,,"ОткрытьФайл(Неопределено)");
	ИначеЕсли мФлагСохранения = Истина Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = Объект.ИмяФайла;
		Длг.Каталог = Объект.ИмяПути;
		Длг.Заголовок = "Выберите файл со списком запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеВыбораОткрытьФайл", ЭтаФорма);
		Длг.Показать(ОповещениеОЗакрытии);	
	КонецЕсли;
	
	мФлагСохранения = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораОткрытьФайл(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда Возврат; КонецЕсли;
	файл = Новый Файл(ВыбранныеФайлы[0]);
	Объект.ИмяФайла = файл.ПолноеИмя;
	Объект.ИмяПути = файл.Путь;
	вЗагрузитьЗапросыИзФайла();
	мТекущаяСтрока = НеОпределено;
	ВызватьПроцедуруМодуляОбъекта("моСохранитьИмяФайла");
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	вСохранитьЗапросыВФайл();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтосохранения()
	Если Не ПустаяСтрока(Объект.ИмяФайла) Тогда
		Сохранить(Неопределено);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СохранитьКак(Команда)
	вСохранитьЗапросыВФайл(Ложь, Истина);
	мФлагСохранения = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	оповещениеОЗакрытии = Новый ОписаниеОповещения("ПродолжитьНастройки",ЭтаФорма);
	НастройкиКонсоли = Новый Структура;
	формПараметры = Новый Структура("Тест",НастройкиКонсоли);
	ОткрытьФорму("ВнешняяОбработка.УниформальнаяКонсольЗапросов.Форма.ФормаНастройкиУпр",формПараметры,ЭтаФорма,,,,оповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьНастройки(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Истина Тогда
		ПрименитьНастройкиНаСервере();
		вОбработкаАвтосохранения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиНаСервере()
	текОбъект = РеквизитФормыВЗначение("Объект");
	текОбъект.моВосстановитьНастройки();
	ЗначениеВРеквизитФормы(текОбъект,"Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзБуфера(Команда)
	
	комОбъект = Новый COMОбъект("htmlfile"); 
    текстБуфера = комОбъект.ParentWindow.ClipboardData.Getdata("Text");
	ВставитьИзБуфераНаСервере(текстБуфера,мТекущаяСтрока);
	
	мИдетДобавление = Истина;
	мАктивизированаДобавляемаяЗапись = Истина;
	
	ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	
	мИдетДобавление = Ложь;
	мАктивизированаДобавляемаяЗапись = Ложь;

КонецПроцедуры

&НаСервере
Процедура ВставитьИзБуфераНаСервере(текстБуфера, идСтроки)
	
	текДанные = Объект.ДеревоЗапросов.НайтиПоИдентификатору(идСтроки);
	Попытка
		струкЗапросаБуфера = ЗначениеИзСтрокиВнутр(текстБуфера);
	Исключение
		текДанные.ТекстЗапроса = текстБуфера;	//вставим хотя бы текст запроса
		текДанные.ТекстЗапросаHTML = "";
		Модифицированность = Истина;
		Возврат;
	КонецПопытки;
	
	текДанные.ТекстЗапроса = струкЗапросаБуфера.Текст;
	текДанные.ТекстЗапросаHTML = "";
	Если ТипЗнч(струкЗапросаБуфера.Параметры) = Тип("Структура") Тогда
		текДанные.ПараметрыЗапроса.Очистить();
		Для каждого ключИЗначение Из струкЗапросаБуфера.Параметры Цикл
			новСтрока = текДанные.ПараметрыЗапроса.Добавить();
			новСтрока.ИмяПараметра = ключИЗначение.Ключ;
			текЗначение = ключИЗначение.Значение;
			Если ТипЗнч(текЗначение) = Тип("Массив") Тогда
				списокПараметр = Новый СписокЗначений;
				списокПараметр.ЗагрузитьЗначения(текЗначение);
				текЗначение = списокПараметр;
			КонецЕсли;
			новСтрока.ЗначениеПараметра = текЗначение;
		КонецЦикла;
	Иначе
		Для каждого строкаТЗ Из струкЗапросаБуфера.Параметры Цикл
			Если ТипЗнч(строкаТЗ.ЗначениеПараметра) = Тип("Массив") Тогда
				текЗначение = строкаТЗ.ЗначениеПараметра;
				списокПараметр = Новый СписокЗначений;
				списокПараметр.ЗагрузитьЗначения(текЗначение);
				строкаТЗ.ЗначениеПараметра = списокПараметр;
			КонецЕсли;				
		КонецЦикла;
		//текДанные.ПараметрыЗапроса.Загрузить(струкЗапросаБуфера.Параметры);
		Для каждого строкаНовыйПараметр Из струкЗапросаБуфера.Параметры Цикл
			строкиПараметра = текДанные.ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра",строкаНовыйПараметр.ИмяПараметра));
			Если строкиПараметра.Количество() = 0 Тогда 
				строкаПараметра = текДанные.ПараметрыЗапроса.Добавить();
				строкаПараметра.ИмяПараметра = строкаНовыйПараметр.ИмяПараметра;
			Иначе
				строкаПараметра = строкиПараметра[0];
			КонецЕсли;
			строкаПараметра.ЗначениеПараметра = строкаНовыйПараметр.ЗначениеПараметра; 
		КонецЦикла;
	КонецЕсли;
	
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
	Для каждого строкаПараметра Из текДанные.ПараметрыЗапроса Цикл
		значПараметра = строкаПараметра.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("ТаблицаЗначений")  Тогда
			адрес = ПоместитьВоВременноеХранилище(значПараметра,Новый УникальныйИдентификатор());
			строкаПараметра.ЗначениеПараметра = адрес;
			соотвТЗПараметр[адрес] = "ТаблицаЗначений("+значПараметра.Количество()+")";
		КонецЕсли;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,уфПредставленияТаблицПараметров);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфер(Команда)
	
	вСохранитьЗапросТекущейСтроки();
	строкаРез = СкопироватьВБуферНаСервере(мТекущаяСтрока);
	
	Попытка
		комОбъект = Новый COMОбъект("htmlfile"); 
	    комОбъект.ParentWindow.ClipboardData.Setdata("Text", строкаРез);
	Исключение
		Возврат;
	КонецПопытки;	

КонецПроцедуры

&НаСервере
Функция СкопироватьВБуферНаСервере(идСтроки)
	текДанные = Объект.ДеревоЗапросов.НайтиПоИдентификатору(идСтроки);
	тзПараметры = текДанные.ПараметрыЗапроса.Выгрузить();
	Для каждого строкаПараметра Из тзПараметры Цикл
		значПараметра = строкаПараметра.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда
			строкаПараметра.ЗначениеПараметра = ПолучитьИзВременногоХранилища(значПараметра);	
		КонецЕсли;
	КонецЦикла;
	рез = Новый Структура;
	рез.Вставить("Текст",текДанные.ТекстЗапроса);
	рез.Вставить("Параметры",тзПараметры);	
	Возврат ЗначениеВСтрокуВнутр(рез);
КонецФункции

&НаКлиенте
Процедура ДобавитьПеренос(Команда)
	НовыйТекст = "";
    Для Ном = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
    	НовыйТекст = НовыйТекст + "|" + СтрПолучитьСтроку(ТекстЗапроса,Ном) + Символы.ПС;
    КонецЦикла;
    
    ТекстЗапроса = НовыйТекст;
КонецПроцедуры

&НаКлиенте
Процедура УбратьПеренос(Команда)
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"|", "");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКод(Команда)
	
	пНазваниеЗапроса = "Запрос";
	оповещение = Новый ОписаниеОповещения("ПолучитьКодПродолжить",ЭтаФорма);
	ПоказатьВводСтроки(оповещение,пНазваниеЗапроса,"Введите Имя запроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодПродолжить(пНазваниеЗапроса,ДополнительныеПараметры) Экспорт
	
    Если пНазваниеЗапроса = Неопределено Тогда
    	Возврат;
    КонецЕсли; 
	
	КодЗапроса = пНазваниеЗапроса + " = Новый Запрос;" + Символы.ПС;
    НовыйТекст = "";
	Для Ном = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		Текст = СтрЗаменить(СтрПолучитьСтроку(ТекстЗапроса,Ном),"|","");
		Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));
    	НовыйТекст = НовыйТекст + Символы.Таб+"|" + Текст + Символы.ПС;
    КонецЦикла;

    КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".Текст = " + Символы.ПС +Символы.Таб+ """"+ СокрЛП(Сред(НовыйТекст,3)) + """"+Символы.ПС+";" + Символы.ПС;
    ТекстЗапроса = СтрЗаменить(вПолучитьТекстЗапроса(Истина), "|", "");
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ПоказатьПредупреждение(,"Отсутствует текст запроса.");
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрЗапроса Из мФормаПараметров.ПараметрыТаблица Цикл
		Если ТипЗнч(ПараметрЗапроса.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			Если ПараметрЗапроса.ЗначениеПараметра.Количество()>0 Тогда
				КодЗапроса = КодЗапроса + ПараметрЗапроса.ИмяПараметра+" = Новый Массив;"+Символы.ПС;
				Для каждого элСписка Из ПараметрЗапроса.ЗначениеПараметра Цикл
					текстЭлемента = ПолучитьТекстПараметра(элСписка.Значение);
					КодЗапроса = КодЗапроса + ПараметрЗапроса.ИмяПараметра+".Добавить("+текстЭлемента+");"+Символы.ПС;
				КонецЦикла;
				КодЗапроса = КодЗапроса + пНазваниеЗапроса+".УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""","+ПараметрЗапроса.ИмяПараметра+");"+Символы.ПС;
			КонецЕсли;
		Иначе
			текстПараметр = ПолучитьТекстПараметра(ПараметрЗапроса.ЗначениеПараметра);
			КодЗапроса = КодЗапроса + пНазваниеЗапроса+".УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""","+текстПараметр+");"+Символы.ПС;
		КонецЕсли;
	КонецЦикла;

    КодЗапроса = КодЗапроса + Символы.ПС+"Выборка = " + пНазваниеЗапроса + ".Выполнить().Выбрать();"+Символы.ПС;
	КодЗапроса = КодЗапроса + "Пока Выборка.Следующий() Цикл"+Символы.ПС;
	КодЗапроса = КодЗапроса + "//"+Символы.ПС;
	КодЗапроса = КодЗапроса + "КонецЦикла;"+Символы.ПС;
	ФормаКода = ПолучитьФорму("ВнешняяОбработка.УниформальнаяКонсольЗапросов.Форма.ФормаКодаЗапросаУпр",,ЭтаФорма);
	ФормаКода.КодЗапроса = КодЗапроса;
	ФормаКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйКод(Команда)
	
	//Если РезультатТаблица.Количество()=0 Тогда Возврат; КонецЕсли; 
	Подсказка = "доступны все поля запроса стр.*";
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтрокиПроизвольныйКод",ЭтаФорма , Параметры);
	ПоказатьВводСтроки(Оповещение, "", Подсказка, 0, Истина);

КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтрокиПроизвольныйКод(Строка, Параметры) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мТаблицаОписанияДерева.Количество()>0 Тогда
		Дерево = РеквизитФормыВЗначение("РезультатДерево");
		
		текСтроки = Дерево.Строки;
		Пока Истина Цикл
			Если текСтроки.Количество() = 0 Тогда
		    	Прервать;
		    КонецЕсли;
		    массивКРазвороту = Новый Массив;
		    Для каждого стр Из текСтроки Цикл
				Для каждого строкаПодчиненная Из стр.Строки Цикл
					массивКРазвороту.Добавить(строкаПодчиненная);  
				КонецЦикла;
				Выполнить(Строка);
		    КонецЦикла;
		    текСтроки = массивКРазвороту;    
		КонецЦикла;
	Иначе
		ТЗ = РеквизитФормыВЗначение("РезультатТаблица");
		Для каждого стр Из ТЗ Цикл
			Выполнить(Строка); 
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Элемент = Неопределено, Пакетный = Неопределено, ТекстЗапроса = Неопределено)
	
	вСохранитьЗапросТекущейСтроки();
	
	Если ТекстЗапроса <> Неопределено Тогда
		ВыполняемыйТекстЗапроса = ТекстЗапроса;
	Иначе
		ВыполняемыйТекстЗапроса = вПолучитьТекстЗапроса(Истина);
	КонецЕсли; 

	Если ПустаяСтрока(ВыполняемыйТекстЗапроса) Тогда
		ПоказатьПредупреждение(,"Не заполнен текст запроса!", 30);
		Возврат;
	КонецЕсли;
	
	вБэкапЗапросаПередВыполнением();

	резВыполнения = ВыполнитьЗапросНаСервере(Пакетный,ВыполняемыйТекстЗапроса);
	
	вОчисткаБэкапаЗапросаПослеВыполнения();
	
	Если резВыполнения.Успех = Ложь Тогда
		ПоказатьПредупреждение(,ОбрезатьСообщениеОбОшибке(резВыполнения.Ошибка));
		Возврат;
	КонецЕсли;
	
	вУстановитьЗаголовокФормы();
	этоДерево = мТаблицаОписанияДерева.Количество()>0;
	Если этоДерево Тогда
		колвоЗаписей = мТаблицаОписанияДерева.Количество();
		//Для каждого строкаДерева Из РезультатДерево.ПолучитьЭлементы() Цикл
		//	Элементы.РезультатДерево.Развернуть(строкаДерева.ПолучитьИдентификатор(),Ложь);
		//КонецЦикла;	
	Иначе
		колвоЗаписей = РезультатТаблица.Количество();
	КонецЕсли;
	//ВремяСтрокой = Формат(резВыполнения.ВремяВыполнения, "ЧН=0");
	//Заголовок = Заголовок + " (" + ВремяСтрокой +" с.)";
	//Элементы.НадписьКолвоСтрок.Заголовок = "Время выполнения: "+ВремяСтрокой+" с. Строк в результате: "+колвоЗаписей;
	Элементы.ДеревоЗапросов.ТекущиеДанные.ВремяВыполнения = резВыполнения.ВремяВыполнения;
	Элементы.ДеревоЗапросов.ТекущиеДанные.КоличествоСтрок = колвоЗаписей;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросНаСервере(Пакетный,ВыполняемыйТекстЗапроса)
	
	резВыполнения = Новый Структура("Успех",Истина);
	ОбъектЗапрос = Новый Запрос;
	ОбъектЗапрос.Текст = ВыполняемыйТекстЗапроса;
	ОбъектЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	текСтрока = Объект.ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Для каждого СтрокаПараметров Из текСтрока.ПараметрыЗапроса Цикл
		значПараметра = СтрокаПараметров.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, ПолучитьИзВременногоХранилища(значПараметра));
		Иначе
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		Если Пакетный <> Неопределено Тогда
			РезЗапроса = ОбъектЗапрос.ВыполнитьПакет();
		Иначе
			РезЗапроса = ОбъектЗапрос.Выполнить();
		КонецЕсли;		
	Исключение
		резВыполнения.Вставить("Ошибка",ОписаниеОшибки());
		резВыполнения.Вставить("Успех",Ложь);
		Возврат резВыполнения;
	КонецПопытки;
	
	ВремяКонцаВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	резВыполнения.Вставить("ВремяВыполнения",(ВремяКонцаВыполнения-ВремяНачала));
		
	вЗагрузитьРезультат(РезЗапроса,ВыполняемыйТекстЗапроса);
	
	Возврат резВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Параметры(Команда)
	
	Если мФормаПараметров.Открыта() = Истина Тогда
		мФормаПараметров.Закрыть();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СклонироватьПараметрыНаСервере(идСтроки)
	строкаЗапроса = Объект.ДеревоЗапросов.найтиПоИдентификатору(идСтроки);
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
	Для каждого строкаПараметра Из строкаЗапроса.ПараметрыЗапроса Цикл
		значПараметра = строкаПараметра.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда
			тзДанные = ПолучитьИзВременногоХранилища(значПараметра);
			адрес = ПоместитьВоВременноеХранилище(тзДанные,Новый УникальныйИдентификатор());
			строкаПараметра.ЗначениеПараметра = адрес;
			соотвТЗПараметр[адрес] = соотвТЗПараметр[значПараметра];
		КонецЕсли;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,уфПредставленияТаблицПараметров);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПодсветкаЗапроса()
	
	Элементы.КнопкаПодсветкаЗапроса.Пометка = Объект.РежимПодсветки_УФ;
	Элементы.ТекстЗапроса.Видимость = НЕ Объект.РежимПодсветки_УФ;
	Элементы.ТекстЗапросаHTML.Видимость = Объект.РежимПодсветки_УФ;	

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	НадоСохранять = Истина;
	
	Если мИдетДобавление Тогда
		Если мАктивизированаДобавляемаяЗапись Тогда

			// Произошла отмена добавления записи.
			НадоСохранять = Ложь;
			мАктивизированаДобавляемаяЗапись = Ложь;
		Иначе
			мАктивизированаДобавляемаяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НадоСохранять Тогда
		вСохранитьЗапросТекущейСтроки();
	КонецЕсли;

	мТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	текДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если Объект.ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		вЗадатьТекстЗапроса(текДанные.ТекстЗапроса,текДанные.ТекстЗапросаHTML);

		мФормаПараметров.ПараметрыТаблица.Очистить();
		соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
		Для каждого строкаПараметра из текДанные.ПараметрыЗапроса Цикл
			новСтрока = мФормаПараметров.ПараметрыТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока,строкаПараметра);
			значПараметра = строкаПараметра.ЗначениеПараметра;
			Если ТипЗнч(значПараметра) = Тип("СписокЗначений") Тогда
				новСтрока.Тип = "Список";
			ИначеЕсли ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда	
				новСтрока.Тип = "Таблица";
				новСтрока.Адрес = значПараметра;
				новСтрока.ЗначениеПараметра = соотвТЗПараметр[значПараметра];
			Иначе
				новСтрока.Тип = "Значение";
			КонецЕсли;					
		КонецЦикла;
		
		Если ЗначениеЗаполнено(текДанные.ТекстЗапроса) Тогда
			Элементы.ДеревоЗапросов.ПодчиненныеЭлементы.ДеревоЗапросовЗапрос.Заголовок = "Запрос ("+СтрЧислоСтрок(текДанные.ТекстЗапроса)+")";
		Иначе
			Элементы.ДеревоЗапросов.ПодчиненныеЭлементы.ДеревоЗапросовЗапрос.Заголовок = "Запрос";
		КонецЕсли;
	
	Иначе

		вЗадатьТекстЗапроса("");
		мФормаПараметров.ПараметрыТаблица.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекРодитель = ТекСтрока.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			НоваяСтрока = ТекРодитель.ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = Объект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		КонецЕсли; 
		вДобавитьСтроки(ТекСтрока, НоваяСтрока);
		СклонироватьПараметрыНаСервере(НоваяСтрока.ПолучитьИдентификатор());
	Иначе
		мИдетДобавление = Истина;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	Если Отказ Тогда Возврат; КонецЕсли;
	мТекущаяСтрока = Неопределено;
	Модифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	соотвТЗПараметр = ПолучитьИзВременногоХранилища(уфПредставленияТаблицПараметров);
	удаляемыеТЗ = Новый Массив;
	Для Каждого строкаПараметра Из ТекДанные.ПараметрыЗапроса Цикл
		значПараметра = строкаПараметра.ЗначениеПараметра;
		Если ТипЗнч(значПараметра) = Тип("Строка") И ЭтоАдресВременногоХранилища(значПараметра) Тогда
			УдалитьИзВременногоХранилища(значПараметра);
			соотвТЗПараметр.Удалить(значПараметра);
			удаляемыеТЗ.Добавить(значПараметра);
		КонецЕсли;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(соотвТЗПараметр,уфПредставленияТаблицПараметров);
	Если удаляемыеТЗ.Количество()>0 Тогда
		Оповестить("УдалениеТаблицЗначенийВПараметрах",удаляемыеТЗ);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Если мИдетДобавление Тогда

		Если ОтменаРедактирования Тогда
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		мИдетДобавление = Ложь;
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	ИДИсточник = ПараметрыПеретаскивания.Значение;
	ИДПриемник = Строка;
    // Если ИДПриемник = Неопределено => Корень дерева
    Приемник = ?(ИДПриемник = Неопределено, Неопределено,Объект.ДеревоЗапросов.НайтиПоИдентификатору(ИДПриемник));
 	Источник = Объект.ДеревоЗапросов.НайтиПоИдентификатору(ИДИсточник);
	НоваяСтрока = СкопироватьСтрокуДерева(Объект.ДеревоЗапросов,Приемник,Источник);
    Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
    	Элемент.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
	КонецЕсли;
		
    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        Элемент.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	мТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Узел нельзя переносить в узлы подчиненные ему самому
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов

    СтандартнаяОбработка = Ложь;

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,Объект.ДеревоЗапросов.НайтиПоИдентификатору(ИДНовыйРодитель));

    ИДПереносимыйЭлемент = ПараметрыПеретаскивания.Значение;
    ПереносимыйЭлемент = Объект.ДеревоЗапросов.НайтиПоИдентификатору(ИДПереносимыйЭлемент);

    Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,НовыйРодитель) Тогда
        ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	этоДерево = Ложь;
	текТаблица = РезультатТаблица;
	Если мТаблицаОписанияДерева.Количество()>0 Тогда
		этоДерево = Истина;
		текТаблица = РезультатДерево;
	КонецЕсли;
	//Если этоДерево Тогда
		ТекущаяСтрока = текТаблица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	//Иначе
	//	ТекущаяСтрока = РезультатТаблица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	//КонецЕсли;
	имяРеквизита = Сред(Поле.Имя,СтрДлина(Элемент.Имя)+2);
	//адрес = "";
	//Если текТаблица.Колонки.Найти(имяРеквизита+"__СлужебныйРасшифровка__")<>Неопределено
	//	И ЭтоАдресВременногоХранилища(ТекущаяСтрока[имяРеквизита+"__СлужебныйРасшифровка__"]) Тогда
	//	адрес = ТекущаяСтрока[имяРеквизита+"__СлужебныйРасшифровка__"];
	//	СодержимоеЯчейки = ПолучитьЗначениеХЗ(адрес);	
	//Иначе
	//	СодержимоеЯчейки = ТекущаяСтрока[имяРеквизита];
	//КонецЕсли;
	//
	//Если текТаблица.Колонки.Найти("РезультатЗапроса__СлужебныйРасшифровка__")<>Неопределено И 
	//	текТаблица.Колонки.Найти("НаименованиеТаблицы")<>Неопределено Тогда
	//	имяТаблицы = ВыбраннаяСтрока.НаименованиеТаблицы;
	//Иначе	
	//	Если этоДерево Тогда
	//		текРодитель = ТекущаяСтрока.Родитель;
	//		Если текРодитель = Неопределено Тогда
	//			номерСтроки = текТаблица.Строки.Индекс(ВыбраннаяСТрока);
	//		Иначе
	//			номерСтроки = ТекущаяСтрока.Родитель.Строки.Индекс(ВыбраннаяСТрока);
	//		КонецЕсли;
	//	Иначе
	//		номерСтроки = текТаблица.Индекс(ВыбраннаяСтрока);	
	//	КонецЕсли;
	//	
	//	имяТаблицы = имяРеквизита + ", строка " + Формат(номерСтроки+1,"ЧГ=0");
	//КонецЕсли;

	СодержимоеЯчейки = ТекущаяСтрока[имяРеквизита];
	адрес = "";
	Попытка
		адрес = ТекущаяСтрока[имяРеквизита+"__СлужебныйРасшифровка__"];
	Исключение
	КонецПопытки;
	
	Попытка
		имяТаблицы = ТекущаяСтрока.НаименованиеТаблицы;
	Исключение
		Если этоДерево Тогда
			текРодитель = ТекущаяСтрока.ПолучитьРодителя();
			Если текРодитель = Неопределено Тогда
				номерСтроки = текТаблица.ПолучитьЭлементы().Индекс(ТекущаяСтрока);
			Иначе
				номерСтроки = текРодитель.ПолучитьЭлементы().Индекс(ТекущаяСтрока);
			КонецЕсли;
		Иначе
			номерСтроки = текТаблица.Индекс(ТекущаяСтрока);	
		КонецЕсли;
		имяТаблицы = имяРеквизита + ", строка " + Формат(номерСтроки+1,"ЧГ=0");
	КонецПопытки;
	
	Если ЗначениеЗаполнено(адрес) Тогда
		СодержимоеЯчейки = ПолучитьЗначениеХЗ(адрес);
	КонецЕсли;
	
	Если СодержимоеЯчейки = "ТаблицаЗначений" И ЗначениеЗаполнено(адрес) Тогда 
		ФормаВложеннойТаблицы = ПолучитьФорму("ВнешняяОбработка.УниформальнаяКонсольЗапросов.Форма.ФормаВложеннойТаблицыУпр",Неопределено, ЭтаФорма);
		ФормаВложеннойТаблицы.Заголовок = "Таблица значений: "+имяТаблицы;
		ФормаВложеннойТаблицы.АдресТаблицы = адрес;
		ФормаВложеннойТаблицы.Открыть();                 
	Иначе
		ПоказатьЗначение(,СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уфПредставленияТаблицПараметров = ПоместитьВоВременноеХранилище(Новый Соответствие,Новый УникальныйИдентификатор);
	текОбъект = РеквизитФормыВЗначение("Объект");
	текОбъект.моВосстановитьНастройки();
	
	// Попытаемся загрузить последний открывавшийся файл запросов
	текОбъект.моВосстановитьИмяФайла();

	Если текОбъект.ИспользоватьБэкапЗапросов Тогда
		мИмяФайлаБэкапаЗапросов = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(текОбъект,"Объект");
	
	//Заполним таблицу результат чтобы её было видно
	тзЗаглушка = Новый ТаблицаЗначений;
	тзЗаглушка.Колонки.Добавить("Результат");
	ВывестиТЗнаФормуПрограммно(тзЗаглушка,"РезультатТаблица","РезультатТаблица");
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	мФормаПараметров = ПолучитьФорму("ВнешняяОбработка.УниформальнаяКонсольЗапросов.Форма.ФормаПараметровУпр", Неопределено, ЭтаФорма);
	
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда
		вСоздатьНовыйФайлЗапросов();
	Иначе
		вЗагрузитьЗапросыИзФайла();
		мТекущаяСтрока = НеОпределено;
	КонецЕсли;
	
	вОбработкаБэкапаЗапросов();
	
	вОбработкаАвтосохранения();
	
	УправлениеВидимостьюПодсветкаЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Неопределено И ЗавершениеРаботы Тогда
		Если Модифицированность Тогда
			ТекстПредупреждения = "Изменения файла запросов не будут сохранены.";
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если мФлагСохранения = Неопределено Тогда
		вСохранитьЗапросыВФайл(Истина,,"Закрыть()");
		//вСохранитьНастройки(); // передача контекста на сервер до 10 секунд
	КонецЕсли;
	
	Если мФлагСохранения<>Истина Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;		
	КонецЕсли;
	
	мФлагСохранения = Неопределено;

КонецПроцедуры


&НаКлиенте
Процедура ВыбратьДействиеВыполнитьЗапрос(Команда)
	Элементы.ФормаДействиеПоУмолчанию.Заголовок = "Выполнить";
	УстановитьНовоеИмяКоманды("ФормаДействиеПоУмолчанию","ВыполнитьЗапрос");
	ВыполнитьЗапрос();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействиеВыполнитьПакет(Команда)
	Элементы.ФормаДействиеПоУмолчанию.Заголовок = "Выполнить пакет";
	УстановитьНовоеИмяКоманды("ФормаДействиеПоУмолчанию","ВыполнитьПакет");
	ВыполнитьПакет(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействиеПросмотрВременныхТаблиц(Команда)
	Элементы.ФормаДействиеПоУмолчанию.Заголовок = "Просмотр временных таблиц";
	УстановитьНовоеИмяКоманды("ФормаДействиеПоУмолчанию","ПросмотрВременныхТаблиц");
	ПросмотрВременныхТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Команда = Неопределено)	
	ВыполнитьЗапрос(Команда,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВременныхТаблиц()

	ПакетыЗапроса = Новый Массив;
	текстОстаток = ТекстЗапроса;
	Пока Истина Цикл
		индРазделителя = Найти(текстОстаток,";");
		Если индРазделителя = 0 Тогда
			ПакетыЗапроса.Добавить(текстОстаток);
			Прервать;
		КонецЕсли;
		ПакетыЗапроса.Добавить(Сред(текстОстаток,1,индРазделителя-1));
		текстОстаток = Сред(текстОстаток,индРазделителя+1);
	КонецЦикла;

	ТекстВыполнения = "";	
	индВРезультате = 0;
	Для индПакета = 0 ПО ПакетыЗапроса.Количество()-1 Цикл
		пакет = ПакетыЗапроса[индПакета];
		ТекстВыполнения = ТекстВыполнения + пакет + ";";
		пакет = СтрЗаменить(пакет, Символы.Таб, " ");
		пакет = СтрЗаменить(пакет, Символы.ПС, " ");
		
		индПоместить = Найти(пакет,"ПОМЕСТИТЬ ");
		Если индПоместить<>0 Тогда
			остатокПакета = Сред(пакет,индПоместить+10);
			индПробела = Найти(остатокПакета," ");
			Если индПробела<>0 Тогда
				имяВТ = Сред(остатокПакета,1,индПробела-1);
				ТекстВыполнения = ТекстВыполнения + "ВЫБРАТЬ * ИЗ "+имяВТ+";";
				новСтрока = мТаблицыЗапроса.Добавить();
				новСтрока.ИмяТаблицы = имяВТ;
				новСтрока.ИндексВРезультате = индВРезультате+1;
				индВРезультате = индВРезультате + 1;
			КонецЕсли;
		КонецЕсли;
		индВРезультате = индВРезультате + 1;
	КонецЦикла;
	
	Если мТаблицыЗапроса.Количество()=0 Тогда
		ПоказатьПредупреждение(,"В запросе не используются временные таблицы!",60);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапрос(, Истина, ТекстВыполнения);
	мТаблицыЗапроса.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаКонструкторЗапроса(Команда)
	#Если ТолстыйКлиентУправляемоеПриложение  Тогда
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда 
			Конструктор = Новый КонструкторЗапроса(); 
		Иначе 
			Конструктор = Новый КонструкторЗапроса(ТекстЗапроса); 
		КонецЕсли;
		рез = Конструктор.ОткрытьМодально();
		Если рез = Истина Тогда
			вЗадатьТекстЗапроса(Конструктор.Текст);
			Модифицированность = Истина;			
		КонецЕсли;
	#Иначе
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда 
			Конструктор = Новый КонструкторЗапроса(); 
		Иначе 
			Конструктор = Новый КонструкторЗапроса(ТекстЗапроса); 
		КонецЕсли;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияКонструктора", ЭтаФорма);
		Конструктор.Показать(ОповещениеОЗакрытии);	
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияКонструктора(Текст,ДополнительныеПараметры) Экспорт
	Если Текст <> Неопределено Тогда
		вЗадатьТекстЗапроса(Текст);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	СвернутьДеревоДоУровня(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДеревоДоУровня(0);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПервыйУр(Команда)
	СвернутьДеревоДоУровня(1);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВторойУр(Команда)
	СвернутьДеревоДоУровня(2);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьТретийУр(Команда)
	СвернутьДеревоДоУровня(3);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПроизвольно(Команда)
	введенноеЧисло = 1;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСвернутьПроизвольно", ЭтаФорма);
	ПоказатьВводЧисла(Оповещение, 1, "Введите уровень сворачивания", , 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСвернутьПроизвольно(ВведенноеЧисло,ДополнительныеПараметры) Экспорт
	Если ВведенноеЧисло<>Неопределено Тогда
		СвернутьДеревоДоУровня(ВведенноеЧисло);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПодсветкаЗапроса(Команда)
	Объект.РежимПодсветки_УФ = НЕ Объект.РежимПодсветки_УФ;
	Если Объект.РежимПодсветки_УФ Тогда
		ТекстЗапросаHTML = РаскраситьТекстЗапроса(ТекстЗапроса);
	КонецЕсли;
	УправлениеВидимостьюПодсветкаЗапроса();
КонецПроцедуры

мЗаголовокФормы = Заголовок;

мТекущаяСтрока = Неопределено;
мИдетДобавление = Ложь; 
мАктивизированаДобавляемаяЗапись = Ложь;

мФлагСохранения = Неопределено;

