Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.

Перем мРезЗапроса;                      // результат 

Перем мТаблицаВыборок;                  // таблица настроек выборок из результата
Перем мСписокПоследнихОткрытыхФайлов;	// список последних открытых файлов

Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу

Перем обMSScriptControl;


Перем мПанельЦентральноеОкноВидимость; //видимость панели параметров

Перем мПанельСписокЗапросовСвернутаВлево;

Перем мФормаОбновленаПриОткрытии;

Перем мДатаТекущейВерсииЗапроса;

Перем мФайлЗапросовСохранитьБы;

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает текст запроса из текстового поля
//
// Параметры:
//  ТолькоВыделенныйТекст - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(Знач ТолькоВыделенныйТекст = Ложь)

	Если Не ТолькоВыделенныйТекст Тогда
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

    ТекстЗап = ЭлементыФормы.ТекстЗапроса.ВыделенныйТекст;
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)

	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);

КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура вУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()

	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		мТекущаяСтрока.ТекстЗапроса 	= 	вПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ОписаниеЗапроса 	= 	ОписаниеЗапроса;
		мТекущаяСтрока.ПараметрыЗапроса = 	Параметры.Скопировать();
		мТекущаяСтрока.СпособВыгрузки 	= 	СпособВыгрузки;
		мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата = ПоказыватьСлужебныеКолонкиРезультата;
		мТекущаяСтрока.ТаблицаВыборок 	= 	ТаблицаВыборок.Скопировать();
		мТекущаяСтрока.СпособВыборки 	= 	СпособВыборки;
		мТекущаяСтрока.ОбходитьИерархическиеВыборкиРекурсивно 	= 	ОбходитьИерархическиеВыборкиРекурсивно;
		мТекущаяСтрока.ВерсииЗапроса    =   ВерсииЗапроса.Скопировать();
		мТекущаяСтрока.ДатаВерсииЗапроса =  мДатаТекущейВерсииЗапроса;

	КонецЕсли;

КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()

	ДеревоЗапросов.Строки.Очистить();
	вЗадатьТекстЗапроса("");
	Параметры.Очистить();
	ТаблицаВыборок.Очистить();
	ПоказыватьСлужебныеКолонкиРезультата = Ложь;
	
КонецПроцедуры // ОчиститьЗначения()

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура вСохранитьИмяФайла()

	СохранитьЗначение("КонсольЗапросов+_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов+_ИмяПути",  мИмяПути);
	
	Если мСписокПоследнихОткрытыхФайлов.НайтиПоЗначению(мИмяФайла) = Неопределено
		И мИмяФайла <> обИмяВременногоФайла Тогда
		мСписокПоследнихОткрытыхФайлов.Вставить(0,мИмяФайла);
		Если мСписокПоследнихОткрытыхФайлов.Количество() = 16 Тогда
		    мСписокПоследнихОткрытыхФайлов.Удалить(15);
		КонецЕсли; 
		
		СформироватьПодменюПоследнихФайлов();
	КонецЕсли; 
	
	СохранитьЗначение("КонсольЗапросов+_СписокПоследнихОткрытыхФайлов",  мСписокПоследнихОткрытыхФайлов);
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура вВосстановитьИмяФайла()

	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов+_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов+_ИмяПути");
	мСписокПоследнихОткрытыхФайлов = ВосстановитьЗначение("КонсольЗапросов+_СписокПоследнихОткрытыхФайлов");

	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;

	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
	Если мСписокПоследнихОткрытыхФайлов = Неопределено Тогда
		мСписокПоследнихОткрытыхФайлов = Новый СписокЗначений;
	Иначе
		СформироватьПодменюПоследнихФайлов();
	КонецЕсли;

КонецПроцедуры // ВосстановитьИмяФайла()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, КолонокВДереве)

	НовоеДерево.Строки.Очистить();

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		
		Для сч = 0 по КолонокВДереве - 1 Цикл
		    НоваяСтрока[сч] = СтрокаДерева[сч];
		КонецЦикла;  
		
		//для запросов из старой консоли устанавливаем новые параметры по умолчанию
		//СпособВыборки 
		Если НоваяСтрока[6] = Неопределено Тогда
			НоваяСтрока[6] = 1;
		КонецЕсли; 
		
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, КолонокВДереве);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура вСоздатьНовыйФайлЗапросов()

	мИмяФайла = "";
	мИмяПути = "";
	вСохранитьИмяФайла();

	вОчиститьЗначения();
	вУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	
	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = мТекущаяСтрока;
	
	УстановитьПараметрыНовогоЗапроса(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока);
	
	ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	
	Модифицированность = Ложь;
	
	//в новом файле всегда один запрос - сворачиваем панель запросов
	
	мПанельСписокЗапросовСвернутаВлево = Истина;	

	УправлениеДиалогом();
	
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьЗапросыИзФайла()

	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);

	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда

		вОчиститьЗначения();
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаВремТаблицы);
			
		КонецЦикла;
		Модифицированность = Ложь;

	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда

		вОчиститьЗначения();
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов, ПолученноеЗначение.Колонки.Количество());
		Модифицированность = Ложь;

	Иначе // Формат файла не опознан
		вСоздатьНовыйФайлЗапросов();
		//обСообщитьПользователюНаКлиенте("Невозможно загрузить список запросов из указанного файла!
		//			   |Выберите другой файл.");

	КонецЕсли;

	вУстановитьЗаголовокФормы();

КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь, ВоВременныйФайл = Ложь)

	вСохранитьЗапросТекущейСтроки();

	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность И Не мФайлЗапросовСохранитьБы Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ВоВременныйФайл И ПустаяСтрока(мИмяФайла) или ЗапрашиватьИмяФайла Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Если ВоВременныйФайл Тогда
		ЗначениеВФайл(обИмяВременногоФайла, ДеревоЗапросов);
	Иначе	
		ЗначениеВФайл(мИмяФайла, ДеревоЗапросов);
		Модифицированность = Ложь;
		вСохранитьИмяФайла();
		вУстановитьЗаголовокФормы();
		мФайлЗапросовСохранитьБы = Ложь;
	КонецЕсли; 

	Возврат Истина;

КонецФункции // СохранитьЗапросыВФайл()

//
//
Процедура ВывестиВыборкуЗапросаРекурсивно(Знач СчетчикРекурсии, Знач Выборка, ПриемникРезультата)
	
	СтрокаОписанияВыборки = мТаблицаВыборок[СчетчикРекурсии];
	
	ТекТипОбхода = СтрокаОписанияВыборки.ТипОбхода;
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.Группировки) Тогда
		СтрокаГруппировки = СтрокаОписанияВыборки.Группировки;
	Иначе	
		СтрокаГруппировки = Неопределено;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок) Тогда
		СтрокаГруппировкиДляЗначенийГруппировок = СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок;
	Иначе	
		СтрокаГруппировкиДляЗначенийГруппировок = Неопределено;
	КонецЕсли; 
	
	Попытка
		ТекВыборка = Выборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок); 
	Исключение
		обСообщитьПользователюНаКлиенте(ОписаниеОшибки());
	КонецПопытки;
	
	Пока ТекВыборка.Следующий() Цикл
		
		НовСтрока = ПриемникРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекВыборка);
		Если СпособВыборки = 2 Тогда
			Если Не ПустаяСтрока(СтрокаОписанияВыборки.Имя)Тогда
				НовСтрока.ИмяВыборки 	= СтрокаОписанияВыборки.Имя;
			Иначе	
				НовСтрока.ИмяВыборки 	= СтрокаОписанияВыборки.Группировки;
			КонецЕсли; 
			
		КонецЕсли; 
		Если ПоказыватьСлужебныеКолонкиРезультата Тогда
			НовСтрока.ТипЗаписи 	= ТекВыборка.ТипЗаписи();
			НовСтрока.Группировка	= ТекВыборка.Группировка();
			НовСтрока.Уровень 		= ТекВыборка.Уровень();
		КонецЕсли; 
		
		Если ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией И ОбходитьИерархическиеВыборкиРекурсивно Тогда
			//такой тип обхода может иметь иерархическую вложенность
			//проходим его до упора
			ТекВыборкаВниз = ТекВыборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок);
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
		КонецЕсли; 
		
		Если СчетчикРекурсии < мТаблицаВыборок.Количество() - 1 Тогда
			
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;  
    	
КонецПроцедуры //ВывестиВыборкуЗапросаРекурсивно

//вставляет служебные колонки результата запроса в таблицу или дерево
//
Процедура СоздатьКолонкиПриемникаРезультата(ТаблицаДерево)
	
	ТаблицаДерево.Колонки.Очистить();
	
	сч = 0;
	Если СпособВыборки = 2 Тогда
		//бум показывать и выборки
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "ИмяВыборки";
		НовКолонка.Заголовок = "Имя выборки";
		
		сч = сч + 1;
	КонецЕсли; 
	
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		//добавим служебные колонки
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "Группировка";
		НовКолонка.Заголовок = "Группировка";
		НовКолонка.Ширина = 25;
		
		сч = сч + 1;
		
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "ТипЗаписи";
		НовКолонка.Заголовок = "Тип записи";
		НовКолонка.Ширина = 20;
		
		сч = сч + 1;
		
		КЧ = Новый КвалификаторыЧисла(10,0);
		
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "Уровень";
		НовКолонка.Заголовок = "Уровень";
		НовКолонка.Ширина = 7;
		
	КонецЕсли;	
	
	//копируем колонки результата
	Для каждого КолонкаРезультата Из мРезЗапроса.Колонки Цикл
		НовКолонка = ТаблицаДерево.Колонки.Добавить();
		ЗаполнитьЗначенияСвойств(НовКолонка,КолонкаРезультата);
	КонецЦикла; 
	
КонецПроцедуры //ВставитьСлужебныеКолонки
 
//копирует используемые выборки в таблицу выборок
//в переменную модуля мТаблицаВыборок
Процедура СкопироватьТаблицуВыборокВПеременную()
	
	мТаблицаВыборок = ТаблицаВыборок.Скопировать();
	мТаблицаВыборок.Очистить();
	
	Для каждого Строка Из ТаблицаВыборок Цикл
		Если НЕ Строка.Включена Тогда Продолжить КонецЕсли; 
		НоваяСтрока = мТаблицаВыборок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла; 
	
КонецПроцедуры //СкопироватьТаблицуВыборокВПеременную
 

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьРезультат(Знач Форма = Неопределено,Знач ЭлементФормы = Неопределено)
	
	Если ЭлементФормы = Неопределено Тогда
		
		ЭлементФормы = ЭлементыФормы.ТаблицаРезультата;
		
	КонецЕсли;//  
	
	Если Форма = Неопределено Тогда
		
		Форма = ЭтаФорма;
		
	КонецЕсли;//  
	
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Результат" Тогда
			
			Если мТаблицаЗагружена = Ложь Тогда
				
				ЭлементФормы.Колонки.Очистить();
				
				Если СпособВыгрузки = 2 Тогда // Дерево
					
					СоздатьКолонкиПриемникаРезультата(Форма.РезультатДерево);
					
					Если СпособВыборки <> 1 И СпособВыборки <> 2 Тогда
					     СпособВыборки = 1;
					КонецЕсли; 
					
					Если СпособВыборки = 1 Тогда
						//стандартный способ
						Форма.РезультатДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					Иначе
						//по настроенным выборкам
						СкопироватьТаблицуВыборокВПеременную();
						СчетчикРекурсии = 0;
						
						Если мТаблицаВыборок.Количество() = 0 Тогда
							обСообщитьПользователюНаКлиенте("Не описана ни одна выборка из запроса!");
							Возврат;
						КонецЕсли; 
						
						ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,Форма.РезультатДерево.Строки);
					КонецЕсли; 
					
					ЭлементФормы.Данные = "РезультатДерево";
					ЭлементФормы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
					
				Иначе // Таблица
					
					СоздатьКолонкиПриемникаРезультата(Форма.РезультатТаблица);
					
					СкопироватьТаблицуВыборокВПеременную();
					
					Если СпособВыборки = 1 Тогда
						//стандартный способ
						Форма.РезультатТаблица = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					Иначе
						СчетчикРекурсии = 0;
						
						Если мТаблицаВыборок.Количество() = 0 Тогда
							обСообщитьПользователюНаКлиенте("Не описана ни одна выборка из запроса!");
							Возврат;
						КонецЕсли; 
						
						ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,Форма.РезультатТаблица);
					КонецЕсли;
					
					
					ЭлементФормы.Данные = "РезультатТаблица";
					
				КонецЕсли;
				мТаблицаЗагружена = Истина;
				
				ЭлементФормы.СоздатьКолонки();
				
				ЦветСлужебнойКолонки = WebЦвета.Синий;
				
				//оформляем служебные колонки
				Если ПоказыватьСлужебныеКолонкиРезультата Тогда
					 Колонка = ЭлементФормы.Колонки["ТипЗаписи"];
					 Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					 Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
					 
					 Колонка = ЭлементФормы.Колонки["Группировка"];
					 Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					 Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
					 
					 Колонка = ЭлементФормы.Колонки["Уровень"];
					 Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					 Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
				 КонецЕсли; 
				 
				 Если СпособВыборки = 2 Тогда
					 Колонка = ЭлементФормы.Колонки["ИмяВыборки"];
					 Колонка.ЦветТекстаПоля = WebЦвета.Коричневый;
					 Колонка.ЦветТекстаШапки = WebЦвета.Коричневый;
				 КонецЕсли; 
				 
			 КонецЕсли;
		
	    КонецЕсли;
	
		КонецЕсли;

	
	ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок = СокрЛП(РезультатТаблица.Количество()) + " строк";
	
КонецПроцедуры // ЗагрузитьРезультат()

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)

	Для Каждого Кол Из Дерево.Колонки Цикл
		ДобСтрока[Кол.Имя] = ТекСтрока[Кол.Имя];
	КонецЦикла; 
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока, Дерево);
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()

	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;

КонецПроцедуры // НовыйФайл()


// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Знач ТолькоВыделенныйФрагмент = Ложь)

	мПанельЦентральноеОкноВидимость = Ложь;
	УправлениеДиалогом();
	
	//в случае вызова через F7 в параметр ТолькоВыделенныйФрагмент приходит элемент формы
	//учтем
	
	Если ТипЗнч(ТолькоВыделенныйФрагмент) <> Тип("Булево") Тогда
	    ТолькоВыделенныйФрагмент = Ложь;
	КонецЕсли; 
	
	вСохранитьЗапросТекущейСтроки();

	Если ТипЗнч(обТекущийЗапрос) <> Тип("Запрос") Тогда
		обТекущийЗапрос = Новый Запрос;
	КонецЕсли; 
	
	Если ПроверитьНаличиеТекстаЗапроса() Тогда
		обТекущийЗапрос.Текст = вПолучитьТекстЗапроса(ТолькоВыделенныйФрагмент);
	Иначе
		Возврат;
	КонецЕсли; 
	
	МассивВТ = обПолучитьВременныеТаблицыИзТекстаЗапроса(обТекущийЗапрос.Текст);
	
	//инициализация менеджера временных таблиц
	
	Если обТекущийЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
		обТекущийЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	
	//...однако если он уже выполнялся в запроснике, то повторное формирование временных таблиц будет вызывать ошибку
	//очистим ВТ которые формируются в самом запросе
	
	Для каждого ИмяВТ Из МассивВТ Цикл
		
		Попытка
			обТекущийЗапрос.Текст = "УНИЧТОЖИТЬ "+СокрЛП(ИмяВТ);		
			обТекущийЗапрос.Выполнить();
		Исключение                                                                                                      
		КонецПопытки; 
		
	КонецЦикла; 
	
	обТекущийЗапрос.Текст = вПолучитьТекстЗапроса(ТолькоВыделенныйФрагмент);
	
	//установка параметров запроса
	Для каждого СтрокаПараметров Из Параметры Цикл
		Если СтрокаПараметров.ЭтоВыражение Тогда
			обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
		Иначе
			
			Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра.ВыгрузитьЗначения());
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.МоментВремениСсылка) Тогда	
				//это момент времени
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Новый МоментВремени(СтрокаПараметров.МоментВремениДата,СтрокаПараметров.МоментВремениСсылка));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.ГраницаВид) Тогда
				//это граница
				Граница = Новый Граница(СтрокаПараметров.ГраницаЗначение,ВидГраницы[СтрокаПараметров.ГраницаВид]);
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Граница);
			//ИначеЕсли Лев(СтрокаПараметров.ЗначениеПараметра,17) = "<ТаблицаЗначений>" Тогда	
			ИначеЕсли Лев(СтрокаПараметров.ЗначениеПараметра,15) = "ТаблицаЗначений" Тогда	
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ТаблицаЗначений);
			Иначе	
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;//  
			
		КонецЕсли;
	КонецЦикла;

	Если ПустаяСтрока(обТекущийЗапрос.Текст) Тогда
		обСообщитьПользователюНаКлиенте("Не заполнен текст запроса!");
		Возврат;
	КонецЕсли;
                                                                                                                                  
	ВременныеТаблицы.Очистить();
	
	Попытка
		
		ЭлементыФормы.НадписьВремяВыполнения.Заголовок = "Выполнение запроса...";
		
		//мРезЗапроса = обТекущийЗапрос.Выполнить();
		
		ИсходныйТекст = обТекущийЗапрос.Текст;
		ТекстДляОбработки = ИсходныйТекст;
		
		ПакетЗапросов = Новый Массив;
		
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.IgnoreCase = Истина;
		RegExp.Global = Истина; 
		RegExp.MultiLine = Истина;
		
		RegExp.Pattern = "[^""]//.*$";
		ТекстДляОбработки = RegExp.Replace(ТекстДляОбработки, "");
		
		RegExp.MultiLine = False;
		//RegExp.Pattern = "(ВЫБРАТЬ)[^;]*";
		RegExp.Pattern = "((ВЫБРАТЬ)[^;]*|(УНИЧТОЖИТЬ)[^;]*)";
		MC = RegExp.Execute(ТекстДляОбработки);
		Для Каждого M Из MC Цикл
			ПакетЗапросов.Добавить(M.Value);
		КонецЦикла;
		
		RegExp.Pattern = "((ПОМЕСТИТЬ)\s+[^;\s]*)";
		
		НомерЗапроса = 1;
		
		ВремяВыполнения = 0; //общее время выполнения запроса
		
		Для Каждого ТекЗапрос Из ПакетЗапросов Цикл
			
			ОбработкаПрерыванияПользователя();
			
			ЭтоВременная = Ложь;
			MC = RegExp.Execute(ТекЗапрос);
			Для Каждого M Из MC Цикл
				ИмяТаблицы = СокрЛП(Сред(СокрЛП(M.Value),11));
				Пока ВременныеТаблицы.Найти(ИмяТаблицы, "Таблица") <> неопределено Цикл
					ИмяТаблицы = ИмяТаблицы + "_";	
				КонецЦикла;
				ЭтоВременная = Истина;
				Прервать;
			КонецЦикла;
			
			Если Не ЭтоВременная Тогда
				
				Если Найти(ТекЗапрос, "УНИЧТОЖИТЬ ") Тогда
					ИмяТаблицы = "Запрос №"+Строка(НомерЗапроса)+"("+СокрЛП(ТекЗапрос)+")";	
				Иначе
					ИмяТаблицы = "Запрос №"+Строка(НомерЗапроса);	
				КонецЕсли;
				
				Количество = "";
				НомерЗапроса = НомерЗапроса + 1;
				
			КонецЕсли;
			
			//Состояние("Выполняется "+ИмяТаблицы);
			обТекущийЗапрос.Текст = ТекЗапрос;
			
			ВТМсекНачала = обMSScriptControl.eval("new Date().getTime()");
			
			мРезЗапроса = обТекущийЗапрос.Выполнить();
			
			ВТМсекКонца = обMSScriptControl.eval("new Date().getTime()");
			
			ВремяВыполненияВТ = (ВТМсекКонца - ВТМсекНачала)/1000;
			
			ВремяВыполнения = ВремяВыполнения + ВремяВыполненияВТ;
			
			Если ЭтоВременная Тогда
				Выборка = мРезЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					Количество = Строка(Выборка[0]);
				КонецЕсли;
			КонецЕсли;
			
			
			Если ЭтоВременная Тогда
				НоваяСтрока = ВременныеТаблицы.Добавить();
				НоваяСтрока.Таблица = ИмяТаблицы;
				НоваяСтрока.ВремяВыполнения  = ВремяВыполненияВТ;
				НоваяСтрока.КоличествоСтрок  = Количество;
				НоваяСтрока.ТекстЗапроса = ТекЗапрос;
				НоваяСтрока.Отладить = "отладить";
			КонецЕсли; 
			
		КонецЦикла;
		
		
		МсекКонца = обMSScriptControl.eval("new Date().getTime()");
		
		мТаблицаЗагружена = Ложь;
		мСводнаяТаблицаЗагружена = Ложь;

		ЭлементыФормы.НадписьВремяВыполнения.Заголовок = "Вывод результата...";
		
		вЗагрузитьРезультат();
		
		ЭлементыФормы.НадписьВремяВыполнения.Заголовок = "Время выполнения: " + СокрЛП(ВремяВыполнения) + " сек.";
		
	Исключение
		обСообщитьПользователюНаКлиенте(ОписаниеОшибки());
	КонецПопытки;
	
	Если ВременныеТаблицы.Количество() > 0 Тогда
		
		Страница = ЭлементыФормы.ПанельРезультата.Страницы.ВременныеТаблицы;
		Страница.Заголовок = "Временные таблицы (" + СокрЛП(ВременныеТаблицы.Количество()) + ")";
		
	Иначе	
		
		Страница = ЭлементыФормы.ПанельРезультата.Страницы.ВременныеТаблицы;
		
	КонецЕсли;
	
	ВременнаяТаблица.Очистить();
	
	ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.Результат;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ВыполнитьЗапрос()


//находит позицию слова "ПОМЕСТИТЬ" (с вариантами) в переданном тексте
//
Функция ПозицияНачалаПоместитьВТексте(ТекстПоиска)
	
	ПозицияНачалаПоместить = Найти(ТекстПоиска, "ПОМЕСТИТЬ");
	
	Если ПозицияНачалаПоместить = 0 Тогда
		ПозицияНачалаПоместить = Найти(ТекстПоиска, "поместить");
	КонецЕсли; 
	
	Если ПозицияНачалаПоместить = 0 Тогда
		ПозицияНачалаПоместить = Найти(ТекстПоиска, "Поместить");
	КонецЕсли; 

	Возврат ПозицияНачалаПоместить;
	
КонецФункции //ПозицияПоместитьВТекстеЗапроса
 


// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультат()
	
	Перем ЗаголовокКолонки;

	Если мРезЗапроса <> Неопределено Тогда
		
		ФормаТабДок = ПолучитьФорму("ТабличныйДокумент",ЭтаФорма);
		ТабДок = ФормаТабДок.ЭлементыФормы.ПолеТабличногоДокумента;
		ТабДок.Очистить();
		
		КоличествоКолонок = мРезЗапроса.Колонки.Количество();

		Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголовка);
		ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
		ОбластьЗаголовка.ЦветФона = WebЦвета.ЦветокБелый;
		ОбластьЗаголовка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

        ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
				
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();

		ФормаТабДок.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	мТаблицаЗагружена = Ложь;
	вЗагрузитьРезультат();
    УправлениеДиалогом();
	
	Модифицированность = Истина;

КонецПроцедуры // СпособВыгрузкиПриИзменении()

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];

    обПоказатьЗначение(СодержимоеЯчейки,Колонка.Имя);
	
КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПередОткрытием()
	Параметры.Колонки.Добавить("ТаблицаЗначений");
	
	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");
	ДеревоЗапросов.Колонки.Добавить("ПоказыватьСлужебныеКолонкиРезультата");
	ДеревоЗапросов.Колонки.Добавить("ТаблицаВыборок");
	ДеревоЗапросов.Колонки.Добавить("СпособВыборки");
	ДеревоЗапросов.Колонки.Добавить("ОбходитьИерархическиеВыборкиРекурсивно");
	ДеревоЗапросов.Колонки.Добавить("ОписаниеЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ТекстАлгоритма");
	ДеревоЗапросов.Колонки.Добавить("ВерсииЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ДатаВерсииЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыАлгоритма");
	
	вВосстановитьИмяФайла();
	
	//если передан внешний запрос - загружаем его
	Если обОтладкаВнешнегоЗапроса  Тогда
		вСоздатьНовыйФайлЗапросов();
		обПолучитьВнешнийЗапрос(мТекущаяСтрока);
		мТекущаяСтрока = Неопределено;
		ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	Иначе	
		// Попытаемся загрузить последний открывавшийся файл запросов
		Если ПустаяСтрока(мИмяФайла) Тогда
			вСоздатьНовыйФайлЗапросов();
		Иначе
			вЗагрузитьЗапросыИзФайла();
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//если в списке только один запрос - скроем список
	
	Если ДеревоЗапросов.Строки.Количество() = 1 Тогда
		мПанельСписокЗапросовСвернутаВлево = Истина;	
	КонецЕсли; 

КонецПроцедуры // ПередОткрытием()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
	НоваяСтрока[0] = мТекущаяСтрока[0]; // Запрос
	НоваяСтрока[1] = мТекущаяСтрока[1]; // ТекстЗапроса
	НоваяСтрока[2] = мТекущаяСтрока[2]; // ПараметрыЗапроса
	НоваяСтрока[3] = мТекущаяСтрока[3]; // СпособВыгрузки
	
	//Тезин В.А. 21.06.2007 14:41:07		начало вставки
	НоваяСтрока[4] = мТекущаяСтрока[4]; // ПоказыватьСлужебныеКолонкиРезультата
	НоваяСтрока[5] = мТекущаяСтрока[5]; // ТаблицаВыборок
	НоваяСтрока[6] = мТекущаяСтрока[6]; // СпособВыборки
	НоваяСтрока[7] = мТекущаяСтрока[7]; // ОбходитьИерархическиеВыборкиРекурсивно
	
	//Тезин В.А. 21.06.2007 14:41:07		конец вставки 

	вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока, ДеревоЗапросов.Колонки.Количество());

    РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
	мТекущаяСтрока = НеОпределено;

	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;

	Модифицированность = Истина;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если НЕ вСохранитьЗапросыВФайл(Истина) Тогда
        СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	вЗагрузитьРезультат();
	
	Если ЭлементыФормы.ПанельРезультата.Страницы[ТекущаяСтраница].Имя = "ВременныеТаблицы" И ВременныеТаблицы.Количество() > 0 
		И ВременнаяТаблица.Количество() = 0 Тогда
		
		Если ВременныеТаблицы.Количество() = 1 И ВременныеТаблицы[0].ВремяВыполнения <= 1 Тогда
			//временная таблица одна и маленькая она
			//сразу ее и покажем
			
			ВыбраннаяСтрока = ВременныеТаблицы[0];
			
			ИмяВременнойТаблицы = ВыбраннаяСтрока.Таблица;
			
			ПоказатьВременнуюТаблицу(ИмяВременнойТаблицы);
			
			ЭлементыФормы.НадписьВременнаяТаблицаВремяВыполнения.Заголовок = "Время выполнения: " + СокрЛП(ВыбраннаяСтрока.ВремяВыполнения) + " сек.";
			
		Иначе	
			
			//покажем инфу о временных таблицах
			мПанельЦентральноеОкноВидимость = Истина;
			ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.ВременныеТаблицы;
			УправлениеДиалогом();
			
		КонецЕсли; 

		
	КонецЕсли; 
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

Процедура КоманднаяПанельЗапросКонструкторЗапросов(Кнопка)
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	Попытка
		ТекстЗапросаКонструктор = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		КонецЕсли;
		
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КонструкторЗапроса.Текст);
		КонецЕсли;
	Исключение
        обСообщитьПользователюНаКлиенте(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если СпособВыборки<>1 И СпособВыборки<>2 Тогда
		СпособВыборки = 1;
	КонецЕсли; 
	
	Если СпособВыгрузки<>1 И СпособВыгрузки<>2 Тогда
		СпособВыгрузки = 1;
	КонецЕсли; 
	
	Если СпособВыборки = 1 Тогда
		ПоказыватьСлужебныеКолонкиРезультата = Ложь;
	КонецЕсли;//  
	
	ОчиститьТекстЗапросаОтМусора();
	
	Если Модифицированность ИЛИ ВерсииЗапроса.Количество() = 0 Тогда
		
		вСохранитьЗапросыВФайл(Ложь, Ложь, Истина);	
		СохранитьТекущуюВерсиюЗапроса();
		мФайлЗапросовСохранитьБы = Истина;
		
	КонецЕсли;//  
	
	ВыполнитьЗапрос();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

//возвращает список группировок анализируя запрос
//
Функция ПолучитьСписокГруппировокЗапроса()
	СписокГруппировок = Новый СписокЗначений;
	
	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат СписокГруппировок;
	КонецЕсли; 
	
	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда   
		
		Если Найти(ТекстЗапроса,"ОБЩИЕ") Тогда
			СписокГруппировок.Добавить("ОБЩИЕ");	
		КонецЕсли; 
		
		Построитель = Новый ПостроительЗапроса;
		Построитель.Текст = ТекстЗапроса;
		Построитель.ЗаполнитьНастройки();
		Для каждого Измерение Из Построитель.Измерения Цикл
			СписокГруппировок.Добавить(Измерение.Имя);	
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат СписокГруппировок;
	
КонецФункции //ПолучитьСписокГруппировокЗапроса

//управление видимостью и доступностью элементов
//
Процедура УправлениеДиалогом()
	
	Если СпособВыгрузки = 2 Тогда
		//для дерева по быстрому не посчитаешь
		//ну и не покажем
	    ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ВыполнитьАлгоритм.Доступность = Ложь;
	Иначе	
	    ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = Истина;
		Если РезультатТаблица.Количество()>0 Тогда
			ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ВыполнитьАлгоритм.Доступность = Истина;
		Иначе
			ЭлементыФормы.КоманднаяПанельРезультат.Кнопки.ВыполнитьАлгоритм.Доступность = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если СпособВыборки = 1 Тогда    
		//стандартная выборка
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Ложь;
		ЭлементыФормы.ОбходитьИерархическиеВыборкиРекурсивно.Доступность = Ложь;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Доступность = Ложь;
	Иначе	
		//по списку настроенных выборок
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Ложь;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Истина;
		ЭлементыФормы.ОбходитьИерархическиеВыборкиРекурсивно.Доступность = Истина;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Доступность = Истина;
	КонецЕсли; 
	
	
	ЭлементыФормы.ПанельЦентральноеОкно.Видимость = мПанельЦентральноеОкноВидимость;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.Видимость = мПанельЦентральноеОкноВидимость;
	
	Если мПанельСписокЗапросовСвернутаВлево Тогда
		
		ЭлементыФормы.ПанельСписокЗапросов.Свертка = РежимСверткиЭлементаУправления.Лево;
		//ЭлементыФормы.НадписьСкрытьПоказатьСписокЗапросов.Заголовок = "Отобр. список";
		
		ЭлементыФормы.НадписьКартинкаПоказатьСписокЗапросов.Видимость = Истина;
		ЭлементыФормы.НадписьКартинкаСкрытьСписокЗапросов.Видимость = Ложь;
		
	Иначе	
		
		ЭлементыФормы.ПанельСписокЗапросов.Свертка = РежимСверткиЭлементаУправления.Нет;
		//ЭлементыФормы.НадписьСкрытьПоказатьСписокЗапросов.Заголовок = "Скрыть список";
		
		ЭлементыФормы.НадписьКартинкаПоказатьСписокЗапросов.Видимость = Ложь;
		ЭлементыФормы.НадписьКартинкаСкрытьСписокЗапросов.Видимость = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры //УправлениеДиалогом

Процедура СпособВыборкиПриИзменении(Элемент)
	
	УправлениеДиалогом();
	
	Если СпособВыборки = 1 Тогда    
		
		ПоказыватьСлужебныеКолонкиРезультата = Ложь;
		
	Иначе	
		
		ТекстЗапроса = вПолучитьТекстЗапроса();
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда Возврат КонецЕсли; 
		Если НЕ Найти(ТекстЗапроса,"ИТОГИ") Тогда
			//тут и итогов то нет
			//выбирать не из чего
			Возврат;
		КонецЕсли; 
		
		//по списку настроенных выборок
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Ложь;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Истина;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Видимость = Истина;
		
		СписокГруппировок = ПолучитьСписокГруппировокЗапроса();
		
		//обновим список измерений запроса
		ЭлементыФормы.ТаблицаВыборок.Колонки.Группировки.ЭлементУправления.СписокВыбора = СписокГруппировок;
		//для группировок значений группировок добавим вариант ВСЕ
		СписокГруппировок.Добавить("ВСЕ");
		ЭлементыФормы.ТаблицаВыборок.Колонки.ГруппировкиДляЗначенийГруппировок.ЭлементУправления.СписокВыбора = СписокГруппировок;
		
		Если ТаблицаВыборок.Количество() = 0 Тогда
			КоманднаяПанельВыборкиПолучитьИзЗапроса(Элемент);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаВыборокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаВыборокПередУдалением(Элемент, Отказ)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаВыборокГруппировкиПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ТаблицаВыборок.ТекущиеДанные;
	ТекДанные.Имя = ТекДанные.Группировки;
КонецПроцедуры

Процедура ТаблицаРезультатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	обОформитьСтрокуТаблицыРезультата(ОформлениеСтроки); 
	
КонецПроцедуры

Процедура КоманднаяПанельВыборкиПолучитьИзЗапроса(Кнопка)
	
	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат;
	КонецЕсли; 

	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если ТаблицаВыборок.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением будет очищена текущая настройка выборок.
		|Увы :(
		|Продолжить?",РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат КонецЕсли; 
	КонецЕсли; 

	ТаблицаВыборок.Очистить();
	
	Если Найти(ТекстЗапроса,"ОБЩИЕ") Тогда
		НоваяСтрока = ТаблицаВыборок.Добавить();
		НоваяСтрока.Включена = Истина;
		НоваяСтрока.Группировки = "ОБЩИЕ";
		НоваяСтрока.Имя = "ОБЩИЕ";
		НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	КонецЕсли; 
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = вПолучитьТекстЗапроса();
	Построитель.ЗаполнитьНастройки();
	СписокГруппировок = Новый СписокЗначений;
	Для каждого Измерение Из Построитель.Измерения Цикл
		НоваяСтрока = ТаблицаВыборок.Добавить();
		НоваяСтрока.Включена = Истина;
		НоваяСтрока.Группировки = Измерение.Имя;
		НоваяСтрока.Имя = Измерение.Имя;
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяЗапроса.Элементы Тогда
			НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
		Иначе	
			НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		КонецЕсли; 
	КонецЦикла; 
	
	НоваяСтрока = ТаблицаВыборок.Добавить();
	НоваяСтрока.Включена = Истина;
	НоваяСтрока.Группировки = "";
	НоваяСтрока.Имя = "ДетальныеЗаписи";
	НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	
КонецПроцедуры

Процедура КонтМенюСвернутьДерево(Кнопка)
	
	Для каждого Строка Из ДеревоЗапросов.Строки[0].Строки Цикл
	    ЭлементыФормы.ДеревоЗапросов.Свернуть(Строка);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ТаблицаВыборокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = ЭлементыФормы.ТаблицаВыборок.ТекущиеДанные;
		ТекДанные.Включена = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ТаблицаВыборокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Включена Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
	Иначе	
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли; 
КонецПроцедуры

//проверяет наличие текста запроса
//возвращает Ложь если нет тексту
Функция ПроверитьНаличиеТекстаЗапроса()
	
	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если ПустаяСтрока(СокрЛП(ТекстЗапроса)) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
КонецФункции //ПроверитьНаличиеТекстаЗапроса

Процедура КнопкаРаскрытьТекстНажатие(Элемент)
	
	Форма = ПолучитьФорму("ТекстЗапроса",ЭтаФорма);
	Форма.ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Форма.ОсновнаяФорма = ЭтаФорма;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДопМенюТекстаЗапросаСкопироватьВБуферОбмена(Кнопка)
	
	
	
	
КонецПроцедуры

Процедура КнопкаСкопироватьВБуферНажатие(Элемент)
	
	Окно = ЭлементыФормы.ПолеHTMLДокументаДляБуфераОбмена.Документ.ParentWindow;
	Окно.ClipboardData.SetData("Text", ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
	
	ПоказатьСообщение("Текст запроса скопирован в буфер", 1);
	
КонецПроцедуры

Процедура КоманднаяПанельЦентральноеОкноРедактироватьМоментВремени(Кнопка)
	
	ТекДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ФормаВвода = ПолучитьФорму("ПараметрМоментВремениГраница");
	
	Если ЗначениеЗаполнено(ТекДанные.МоментВремениСсылка) Тогда
		
		ФормаВвода.Режим = "МоментВремени";
		
	Иначе	
		
		ФормаВвода.Режим = "Граница";
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ФормаВвода,ТекДанные);
	
	РезультатВыбора = ФормаВвода.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		ЗаполнитьЗначенияСвойств(ТекДанные,РезультатВыбора);
		
		Если РезультатВыбора.Режим = "МоментВремени" Тогда
			
			ТекДанные.ЗначениеПараметра = "Момент времени: " + СокрЛП(ТекДанные.МоментВремениСсылка) + ", дата " + СокрЛП(ТекДанные.МоментВремениДата);
			
		Иначе
			
			ТекДанные.ЗначениеПараметра = "Граница: " + СокрЛП(ТекДанные.ГраницаЗначение) + ",  " + СокрЛП(ТекДанные.ГраницаВид);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.Параметры.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекДанные.МоментВремениСсылка) ИЛИ ЗначениеЗаполнено(ТекДанные.ГраницаВид) Тогда
		
		КоманднаяПанельЦентральноеОкноРедактироватьМоментВремени(Элемент);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(ТекДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		
		КоманднаяПанельПараметрыСписок(Элемент);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	Если Лев(ТекДанные.ЗначениеПараметра,15) = "ТаблицаЗначений" Тогда
		
		КоманднаяПанельПараметрыТаблицаЗначений(Элемент);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаТекстДляМодуляВБуферНажатие(Элемент)
	
	ФормаВыбораВарианта = ПолучитьФорму("ВариантыЗапросаДляБуфера");

	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	//одинарные кавычки надо заменить на двойные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
    ТекстЗапроса	=	СтрЗаменить(ТекстЗапроса,Строка1Кавычка,Строка2Кавычки);
	
	//открывающие и закрывающие 
	ТекстЗапроса = Символ(34) + ТекстЗапроса + Символ(34) + ";";
	
	
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.УстановитьТекст(ТекстЗапроса);
	
	Для сч = 2 по ТекстДок.КоличествоСтрок() Цикл
		Строка = ТекстДок.ПолучитьСтроку(сч);
		ТекстДок.ЗаменитьСтроку(сч,"|"+Строка);
	КонецЦикла;  
	
	ФормаВыбораВарианта.ЭлементыФормы.Вариант1.УстановитьТекст(Символы.ВК + ТекстДок.ПолучитьТекст()); 
	
	ТекстМодуля = 
	"Запрос = Новый Запрос;
	|Запрос.Текст = 
	|" 
	+ ТекстДок.ПолучитьТекст(); 
	
	Для каждого СтрокаПараметров Из Параметры Цикл
		ТекстМодуля = ТекстМодуля + Символы.ПС + "Запрос.УстановитьПараметр(" + Строка1Кавычка + СокрЛП(СтрокаПараметров.ИмяПараметра) + Строка1Кавычка + ", );"
	КонецЦикла; 
	
	ТекстМодуля = ТекстМодуля + Символы.ПС + "Результат = Запрос.Выполнить();";
	
	ФормаВыбораВарианта.ЭлементыФормы.Вариант2.УстановитьТекст(Символы.ВК + ТекстМодуля); 
	ФормаВыбораВарианта.ВладелецФормы = ЭтаФорма;
	ФормаВыбораВарианта.ЗакрыватьПриЗакрытииВладельца = Истина;
	
	ФормаВыбораВарианта.Открыть();
	
КонецПроцедуры

//
//
Процедура СпрятатьСообщение()

	ЭлементыФормы.НадписьСообщение.Видимость = Ложь;

КонецПроцедуры //СпрятатьСообщение
 
//
//
Процедура ПоказатьСообщение(ТекстСообщения, ВрямяПоказаСек)

	ЭлементыФормы.НадписьСообщение.Заголовок = ТекстСообщения;
	
	ЭлементыФормы.НадписьСообщение.Видимость = Истина;
	
	ПодключитьОбработчикОжидания("СпрятатьСообщение",ВрямяПоказаСек,Истина);
	                                                              
КонецПроцедуры //ПоказатьСообщение

Процедура КнопкаВыполнитьВыполнитьВыделенныйФрагмент(Кнопка)
	
	ВыполнитьЗапрос(Истина);
	
КонецПроцедуры

Процедура ЗакрытьНажатие(Элемент)
	
	мПанельЦентральноеОкноВидимость = Ложь;
	
	УправлениеДиалогом();
	
КонецПроцедуры
 
//
//
Процедура ЗаполнитьПараметрыПоЗапросу()

	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		обСообщитьПользователюНаКлиенте(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		
		ИмяПараметра =  ПараметрЗапроса.Имя;
		СтрокаПараметров = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
		Если  СтрокаПараметров = Неопределено Тогда
			СтрокаПараметров = Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
		    СтрокаПараметров.ЗначениеПараметра = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры //ЗаполнитьПараметрыПоЗапросу

Процедура КонструкторЗапросаНажатие(Элемент)
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	
	Попытка
		ТекстЗапросаКонструктор = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		КонецЕсли;
		
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КонструкторЗапроса.Текст);
			Модифицированность = Истина;
		КонецЕсли;
		
		КолПараметровДо = Параметры.Количество();
		
		//автоматом тянем параметры
		ЗаполнитьПараметрыПоЗапросу();
		
		КолПараметровПосле = Параметры.Количество();
		
		Если КолПараметровПосле > КолПараметровДо Тогда
			
			//появились новые параметры
			//откроем форму для их заполнения
			мПанельЦентральноеОкноВидимость = Истина;
			ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.Параметры;
			УправлениеДиалогом();
			
		КонецЕсли; 
		
	Исключение
		
		обСообщитьПользователюНаКлиенте(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура КнопкаПараметрыНажатие(Элемент)
	
	мПанельЦентральноеОкноВидимость = Истина;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.Параметры;
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура НадписьСкрытьПоказатьСписокЗапросовНажатие(Элемент)
	
	мПанельСписокЗапросовСвернутаВлево = НЕ мПанельСписокЗапросовСвернутаВлево;
	
	УправлениеДиалогом();
	
КонецПроцедуры

//загружает список запросов из старых открытых ранее файлов
//
Процедура ЗагрузитьЗапросыИзСтарогоФайла(Кнопка)
	
КонецПроцедуры //ЗагрузитьЗапросыИзСтарогоФайла

//переносит список последних файлов в спец. подменю
//
Процедура СформироватьПодменюПоследнихФайлов()

	ПоследниеФайлыЗапросов.Очистить();
	
	//добавляем последний выполненный
	
	Файл = Новый Файл(обИмяВременногоФайла);
	Если Файл.Существует() Тогда
		НовСтрока = ПоследниеФайлыЗапросов.Добавить();
		НовСтрока.Файл = Файл.Имя;
		НовСтрока.Каталог = Файл.Путь;
	КонецЕсли; 
		
	Для каждого ЭлементСписка Из мСписокПоследнихОткрытыхФайлов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда Продолжить КонецЕсли; 
		Если ЭлементСписка.Значение = обИмяВременногоФайла Тогда Продолжить КонецЕсли; 
		
		Файл = Новый Файл(ЭлементСписка.Значение);
		
		Если Не Файл.Существует() Тогда Продолжить	КонецЕсли;  
		
		НовСтрока = ПоследниеФайлыЗапросов.Добавить();
		НовСтрока.Файл = Файл.Имя;
		НовСтрока.Каталог = Файл.Путь;
		
	КонецЦикла; 

КонецПроцедуры //СформироватьПодменюПоследнихФайлов
 
Процедура ПоследниеФайлыЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ПоследниеФайлыЗапросов.ТекущиеДанные;
	
	мИмяФайла = ТекДанные.Каталог + ТекДанные.Файл;
	
	Если мИмяФайла = обПредставлениеВременногоФайла Тогда
		
		мИмяФайла = обИмяВременногоФайла;
		
	КонецЕсли; 
	
	вЗагрузитьЗапросыИзФайла();
	мТекущаяСтрока = НеОпределено;
	вСохранитьИмяФайла();
	
	мПанельЦентральноеОкноВидимость = Ложь;
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура ТаблицаРезультатаПриАктивизацииЯчейки(Элемент)
	
	Если ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено ИЛИ 
		ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;  
	
	СодержимоеЯчейки = ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные[ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка.Имя];	
	
	ЭлементыФормы.НадписьТипЗначенияТекущейЯчейки.Заголовок =  ТипЗнч(СодержимоеЯчейки);
	
КонецПроцедуры

Процедура КнопкаВыборкиНажатие(Элемент)
	
	СпособВыборкиПриИзменении(Элемент);
	мПанельЦентральноеОкноВидимость = Истина;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.Выборки;
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура КнопкаРаскрытьРезультатНажатие(Элемент)
	
	мТаблицаЗагружена = Ложь;
	
	Результат = ПолучитьФорму("Результат",ЭтаФорма, Новый УникальныйИдентификатор);
	вЗагрузитьРезультат(Результат,Результат.ЭлементыФормы.ТаблицаРезультата);
	Результат.ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок = ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок;
	Результат.ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = ЭлементыФормы.НадписьКолСтрокРезультата.Видимость;
	
	Если ЗначениеЗаполнено(мТекущаяСтрока) Тогда
		Результат.Заголовок = мТекущаяСтрока.Запрос;
	КонецЕсли;//  
	
	Результат.Открыть();
	
КонецПроцедуры

Процедура ВременнаяТаблицаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];

    обПоказатьЗначение(СодержимоеЯчейки,Колонка.Имя);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
/// КОНТЕКСТНОЕ МЕНЮ ТЕКСТА ЗАПРОСА --->                                                

Процедура КонтекстноеМенюТекстаЗапросаКомментировать(Кнопка)
	
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		НовСтрока = "//" + ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(сч);
		ЭлементыФормы.ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КонтекстноеМенюТекстаЗапросаСнятьКомментарий(Кнопка)
	
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		СтарСтрока = ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(сч);
		Если Не Лев(СтарСтрока,2) = "//" Тогда Продолжить КонецЕсли; 
		
		НовСтрока = Сред(СтарСтрока,3,СтрДлина(СтарСтрока));
		ЭлементыФормы.ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КонтекстноеМенюТекстаЗапросаУдалитьСимволыМодуля(Кнопка)
	
	ОчиститьТекстЗапросаОтМусора();	
	
КонецПроцедуры

// <--- КОНТЕКСТНОЕ МЕНЮ ТЕКСТА ЗАПРОСА                                                                   
////////////////////////////////////////////////////////////////////////// 
 
//
//
Процедура ОчиститьТекстЗапросаОтМусора()

  ЭлементыФормы.ТекстЗапроса.УстановитьТекст(обПропылесоситьТекстЗапроса(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()));	

КонецПроцедуры //ОчиститьТекстЗапросаОтМусора

Процедура ПараметрыПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.Параметры.ТекущиеДанные = Неопределено Тогда Возврат	КонецЕсли;//  
	
	ЭлементыФормы.НадписьТипЗначенияПараметра.Заголовок =  ТипЗнч(ЭлементыФормы.Параметры.ТекущиеДанные.ЗначениеПараметра);
	
КонецПроцедуры

Процедура ВременнаяТаблицаПриАктивизацииЯчейки(Элемент)
	
	Если ЭлементыФормы.ВременнаяТаблица.ТекущаяКолонка = Неопределено ИЛИ 
		ЭлементыФормы.ВременнаяТаблица.ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;  
	
	СодержимоеЯчейки = ЭлементыФормы.ВременнаяТаблица.ТекущиеДанные[ЭлементыФормы.ВременнаяТаблица.ТекущаяКолонка.Имя];	
	
	ЭлементыФормы.НадписьТипЗначенияТекущейЯчейки.Заголовок =  ТипЗнч(СодержимоеЯчейки);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
/// РАБОТА С ФАЙЛАМИ ЗАПРОСОВ --->                                                


Процедура КоманднаяПанельФайлыОткрытьФайл(Кнопка)
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Выберите файл со списком запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
			вЗагрузитьЗапросыИзФайла();
			мТекущаяСтрока = НеОпределено;
			вСохранитьИмяФайла();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыСохранитьФайл(Кнопка)
	
	вСохранитьЗапросыВФайл();
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыСохранитьФайлКак(Кнопка)
	
	вСохранитьЗапросыВФайл(Ложь, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыПоследниеФайлы(Кнопка)
	
	мПанельЦентральноеОкноВидимость = Истина;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.ПоследниеФайлыЗапросов;
	УправлениеДиалогом();
	
КонецПроцедуры

// <--- РАБОТА С ФАЙЛАМИ ЗАПРОСОВ                                                                   
////////////////////////////////////////////////////////////////////////// 


//////////////////////////////////////////////////////////////////////////
/// РАБОТА С ДЕРЕВОМ ЗАПРОСОВ --->                                                

Процедура КоманднаяПанельФормыДобавитьПодчиненныйЗапрос(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	НовСтрока = ТекСтрока.Строки.Добавить();
	УстановитьПараметрыНовогоЗапроса(НовСтрока);
	
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НовСтрока;
	
КонецПроцедуры

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Отказ = Истина;
	
	вСохранитьЗапросТекущейСтроки();
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	
	//по умолчанию строки добавляются в тот же уровень
	
	Если ДеревоЗапросов.Строки.Количество() = 0 ИЛИ ТекСтрока.Родитель = Неопределено Тогда
		//копируется строка в корне дерева в корень дерева
		НоваяСтрока = ДеревоЗапросов.Строки.Добавить();
	Иначе	
		//копирование происходит под того же родителя
		НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
	КонецЕсли; 
	
	Если Копирование Тогда
		//копируем содержимое
		вДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);	
	Иначе
		//заполним новую строку параметрами по умолчанию
		УстановитьПараметрыНовогоЗапроса(НоваяСтрока);
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		
	КонецЕсли; 
	
	//мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();

КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	вСохранитьЗапросТекущейСтроки();

	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	Если мТекущаяСтрока = Неопределено И ДеревоЗапросов.Строки.Количество() = 0 Тогда
		//в дереве вообще нет запросов
		вОчиститьЗначения();
		Возврат;
	КонецЕсли; 
	
	ИмяЗапроса = мТекущаяСтрока.Запрос;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);

		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Параметры.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				
				НоваяСтрока = Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
				
			КонецЦикла;
		КонецЕсли;

        Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;

		ИсходнаяТаблицаВыборок = мТекущаяСтрока.ТаблицаВыборок;
		ТаблицаВыборок.Очистить();
		Если Не ИсходнаяТаблицаВыборок = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаВыборок Цикл
				НоваяСтрока = ТаблицаВыборок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		СпособВыборки = мТекущаяСтрока.СпособВыборки;
		
		//в старых форматах много чего не было
		//восстанавливаем через попытку
		Попытка
			ОписаниеЗапроса = мТекущаяСтрока.ОписаниеЗапроса;
			ВерсииЗапроса = мТекущаяСтрока.ВерсииЗапроса; 
			мДатаТекущейВерсииЗапроса = мТекущаяСтрока.ДатаВерсииЗапроса;
		Исключение
		КонецПопытки; 
		
		Если ВерсииЗапроса.Колонки.Количество() = 0 Тогда
			
			СоздатьСтруктуруТаблицыВерсииЗапроса();
			
		КонецЕсли; 
		
		ПоказыватьСлужебныеКолонкиРезультата = мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата;

	Иначе

		вЗадатьТекстЗапроса("");
		Параметры.Очистить();
		ТаблицаВыборок.Очистить();
		ВерсииЗапроса.Очистить();

	КонецЕсли;

	УправлениеДиалогом();
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыборки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыборки = 1;
	КонецЕсли;
	
	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	//Если мИдетДобавление Тогда

	//	Если ОтменаРедактирования Тогда
	//		мТекущаяСтрока = Неопределено;
	//	КонецЕсли;
	//	
	//	мИдетДобавление = Ложь;
	//КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()


// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()

	ВыборСтрокиДереваЗапросов = ПолучитьФорму("ВыборСтрокиДереваЗапросов", ЭтаФорма);
	ВыборСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ВыборСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ВыборСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ВыборСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	ВыборСтрокиДереваЗапросов.ОткрытьМодально();

КонецПроцедуры // ПеренестиСтрокуДерева()

//
//
Процедура УстановитьПараметрыНовогоЗапроса(СтрокаДерева)

	СтрокаДерева.Запрос = "Новый";
	СтрокаДерева.СпособВыгрузки = 1;
	СтрокаДерева.СпособВыборки = 1;     
	СтрокаДерева.ОбходитьИерархическиеВыборкиРекурсивно = Истина;     
	СтрокаДерева.ТекстЗапроса = "";
	
	СтрокаДерева.ПараметрыЗапроса = Параметры.СкопироватьКолонки();
	
	СтрокаДерева.ВерсииЗапроса = ВерсииЗапроса.СкопироватьКолонки();

КонецПроцедуры //УстановитьПараметрыНовогоЗапроса

Процедура ОбновлениеОтображения()
	// Вставить содержимое обработчика.
	
	Если Не мФормаОбновленаПриОткрытии Тогда
		
		НадписьСкрытьПоказатьСписокЗапросовНажатие(Неопределено);
		
		мФормаОбновленаПриОткрытии = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

//отображение содержимого временной таблицы в табличном поле ВременнаяТаблица
//
Процедура ПоказатьВременнуюТаблицу(ИмяТаблицы)

	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда Возврат	КонецЕсли; 
	
	//Получаем таблицу из менеджера временных таблиц запроса
    ЗапросТМП = Новый Запрос("ВЫБРАТЬ * ИЗ " + ИмяТаблицы);
    ЗапросТМП.МенеджерВременныхТаблиц = обТекущийЗапрос.МенеджерВременныхТаблиц; 
    ВременнаяТаблица = ЗапросТМП.Выполнить().Выгрузить(); 
	ЭлементыФормы.ВременнаяТаблица.СоздатьКолонки();
	
	ЭлементыФормы.НадписьКолСтрокВременнойТаблицы.Заголовок = СокрЛП(ВременнаяТаблица.Количество()) + " строк";

КонецПроцедуры //ПоказатьВременнуюТаблицу
 

Процедура ВременныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(мРезЗапроса) Тогда
		ВыполнитьЗапрос();
	КонецЕсли;//  
	
	Если Колонка.Имя = "Отладить" Тогда
		
		ОтладитьЗапросВременнойТаблицы(ЭлементыФормы.ВременныеТаблицы.ТекущиеДанные.Таблица);
		
	Иначе
		
		ИмяВременнойТаблицы = ВыбраннаяСтрока.Таблица;
		
		ПоказатьВременнуюТаблицу(ИмяВременнойТаблицы);
		
		ЭлементыФормы.НадписьВременнаяТаблицаВремяВыполнения.Заголовок = "Время выполнения: " + СокрЛП(ВыбраннаяСтрока.ВремяВыполнения) + " сек.";
		
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	мПанельЦентральноеОкноВидимость = Ложь;
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура ИмяВременнойТаблицыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//покажем инфу о временных таблицах
	мПанельЦентральноеОкноВидимость = Истина;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.ВременныеТаблицы;
	УправлениеДиалогом();
	
КонецПроцедуры

// <--- РАБОТА С ДЕРЕВОМ ЗАПРОСОВ                                                                   
////////////////////////////////////////////////////////////////////////// 


//////////////////////////////////////////////////////////////////////////
/// РАБОТА С ПАРАМЕТРАМИ --->                                                

// Обработчик события при начале редактирования строки параметров
//
Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока)

	вУправлениеКолонкамиПараметры();

КонецПроцедуры // ПараметрыПриНачалеРедактирования()

// Обработчик события при окончании редактирования строки параметров
//
Процедура ПараметрыПриОкончанииРедактирования(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры // ПараметрыПриОкончанииРедактирования()

// Обработчик события перед удалением строки параметров
//
Процедура ПараметрыПередУдалением(Элемент, Отказ)

	Модифицированность = Истина;

КонецПроцедуры // ПараметрыПередУдалением()

// Обработчик изменения флажка "ЭтоВыражение"
//
Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)

	Если Колонка.Имя = "ЭтоВыражение" Тогда

		Если Элемент.ТекущаяСтрока.ЭтоВыражение Тогда
			Если Не ТипЗнч(Элемент.ТекущаяСтрока.ЗначениеПараметра) = Тип("Строка") Тогда
				Элемент.ТекущаяСтрока.ЗначениеПараметра = "";
			КонецЕсли; 
		КонецЕсли;

		вУправлениеКолонкамиПараметры();

	КонецЕсли; 

КонецПроцедуры // ПараметрыПриИзмененииФлажка()

// Обработчик нажатия кнопки командной панели "Дополнить из запроса"
//
Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	
  ЗаполнитьПараметрыПоЗапросу();

КонецПроцедуры

Процедура ПараметрыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//неиспользуемые параметры подкрасим серым цветом
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Возврат;
	КонецПопытки;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки; 
		
		Если ПараметрыЗапроса.Найти(ДанныеСтроки.ИмяПараметра) = Неопределено Тогда
			
			ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыУдалитьНеиспользуемые(Кнопка)
	
	УдалитьНеиспользуемыеПараметры();
	
КонецПроцедуры

//удаление из параметров неиспользуемых больше в запросе
//
Процедура УдалитьНеиспользуемыеПараметры()

	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Возврат;
	КонецПопытки;
	
	Кол = Параметры.Количество();
	
	Для сч = 1 по Кол Цикл
		
		ТекПараметр = Параметры[Кол - сч];
		
		Если ПараметрыЗапроса.Найти(ТекПараметр.ИмяПараметра) = Неопределено Тогда
			
			Параметры.Удалить(ТекПараметр);
			
		КонецЕсли; 
		
	КонецЦикла;  

КонецПроцедуры //УдалитьНеиспользуемыеПараметры

// определяет возможность использование данного типа в СЗ
Функция ЭтоТрансферныйТип(Знач ВхТип)
	
	Возврат ВхТип = Тип("Булево")
		ИЛИ ВхТип = Тип("Строка")
		ИЛИ ВхТип = Тип("Дата")
		ИЛИ ВхТип = Тип("Число")
		ИЛИ ВхТип = Тип("ВидСчета")
		ИЛИ ВхТип = Тип("ВидДвиженияБухгалтерии")
		ИЛИ ВхТип = Тип("ВидДвиженияНакопления");
	
КонецФункции

Процедура КоманднаяПанельПараметрыСписок(Кнопка)
	
	ТекДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначениеПараметра = ТекДанные.ЗначениеПараметра; 
	
	Список = Новый СписокЗначений;
	
	Если ТипЗнч(ТекЗначениеПараметра) = Тип("СписокЗначений") Тогда
		Список.ЗагрузитьЗначения(ТекЗначениеПараметра.ВыгрузитьЗначения());
	Иначе	
		Если ЗначениеЗаполнено(ТекДанные.ЗначениеПараметра) Тогда
			Список.Добавить(ТекДанные.ЗначениеПараметра);
		КонецЕсли;	
	КонецЕсли;	
	
	Форма = ПолучитьФорму("ПараметрСписокЗначений");
	Форма.Заголовок = "Список значений параметра " + ТекДанные.ИмяПараметра;
	Форма.Список = Список;
	
	Массив = Новый Массив;
	Массив.Добавить(ТипЗнч(ТекЗначениеПараметра));
	
	ОТ = Новый ОписаниеТипов(Массив);
	
	Форма.ТипЗначенияПараметра = ОТ;
	
	СписокВозврата = Форма.ОткрытьМодально();
	
	Если СписокВозврата <> Неопределено Тогда
		 ТекДанные.ЗначениеПараметра = СписокВозврата;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыТаблицаЗначений(Кнопка)
	
	ТекДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЗВозврата = обПоказатьТаблицуЗначений(ТекДанные.ТаблицаЗначений,Истина);
	
	Если ТЗВозврата <> Неопределено Тогда
		ТекДанные.ТаблицаЗначений = ТЗВозврата;
		ТекДанные.ЗначениеПараметра = "ТаблицаЗначений : " + СокрЛП(ТЗВозврата.Количество()) + " стр.";
	КонецЕсли; 
	
КонецПроцедуры


// Управляет признаком выбора типа у поля ввода, редактирующего значения параметра
//
// Параметры:
//	Нет.
//
Процедура вУправлениеКолонкамиПараметры()

	ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ВыбиратьТип = Не ЭлементыФормы.Параметры.ТекущаяСтрока.ЭтоВыражение;

КонецПроцедуры // УправлениеКолонкамиПараметры()

Процедура КнопкаПоказатьВременнуюТаблицуНажатие(Элемент)
	
	ПоказатьВременнуюТаблицу(ИмяВременнойТаблицы);
	
	//попытаемся найти таблицу в списке временных таблиц для отображения времени выполнения
	
	СтрокаВТ = ВременныеТаблицы.Найти(ИмяВременнойТаблицы,"Таблица");
	
	Если СтрокаВТ <> Неопределено Тогда
		ЭлементыФормы.НадписьВременнаяТаблицаВремяВыполнения.Заголовок = "Время выполнения: " + СокрЛП(СтрокаВТ.ВремяВыполнения) + " сек.";
	Иначе	
		ЭлементыФормы.НадписьВременнаяТаблицаВремяВыполнения.Заголовок = "";
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаРаскрытьВременнуюТаблицуНажатие(Элемент)
	
	Результат = ПолучитьФорму("Результат",ЭтаФорма, Новый УникальныйИдентификатор);
	
	Результат.РезультатТаблица = ВременнаяТаблица.Скопировать();
	Результат.ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
	
	Результат.ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок = ЭлементыФормы.НадписьКолСтрокВременнойТаблицы.Заголовок;
	Результат.ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = Истина;
	Результат.Заголовок = ИмяВременнойТаблицы;
	
	Результат.Открыть();
	
КонецПроцедуры

Процедура КнопкаОтладитьЗапросВременнойТаблицыНажатие(Элемент)
	
	ОтладитьЗапросВременнойТаблицы(ИмяВременнойТаблицы);
	
КонецПроцедуры

//в дереве запросов создается запрос по формированию временной таблицы 
//в него копируются параметры текущего запроса
//и он отлаживается
Процедура ОтладитьЗапросВременнойТаблицы(ИмяВТ)

	Если Не ЗначениеЗаполнено(ИмяВТ) Тогда Возврат КонецЕсли; 
	
	//попытаемся найти таблицу в списке временных таблиц
	
	СтрокаВТ = ВременныеТаблицы.Найти(ИмяВТ,"Таблица");
	
	Если СтрокаВТ = Неопределено Тогда Возврат КонецЕсли; 
	
	ТекСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	//строка временной таблицы в дереве добавляется под родительский запрос
	
	ИмяСтрокиВДереве = "врем.табл. " + ИмяВТ;
	
	//сначала попробуем ее там найти
	
	СтрокаВТВДереве = ТекСтрока.Строки.Найти(ИмяСтрокиВДереве);
	
	Если СтрокаВТВДереве = Неопределено Тогда
		СтрокаВТВДереве = ТекСтрока.Строки.Добавить();
	КонецЕсли; 
	
	УстановитьПараметрыНовогоЗапроса(СтрокаВТВДереве);
	
	//копируем параметры запроса
	СтрокаВТВДереве.Запрос = ИмяСтрокиВДереве;
	
	//обрабатываем текст запроса
	
	ТекстЗапросаВТ = СтрокаВТ.ТекстЗапроса;
	
	//удаляем из текста запроса ПОМЕСТИТЬ и имя таблицы
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"ПОМЕСТИТЬ " + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"поместить" + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"Поместить" + ИмяВТ,"");
	
	СтрокаВТВДереве.ТекстЗапроса = ТекстЗапросаВТ;
	
	Для каждого ИсхПараметр Из ТекСтрока.ПараметрыЗапроса Цикл
		
		НовПараметр = СтрокаВТВДереве.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НовПараметр,ИсхПараметр);
		
	КонецЦикла;	
	
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = СтрокаВТВДереве;
	
	ВремяВыполненияВТ = СтрокаВТ.ВремяВыполнения;
	
	//чистим результат
	РезультатДерево.Строки.Очистить();
	РезультатТаблица.Очистить();
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок = "";
	ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок = "";
	
	//чистим данные по временным таблицам
	ИмяВременнойТаблицы = "";
	ВременныеТаблицы.Очистить();
	
	//удаляем неиспользуемые во временной таблице параметры запроса
	УдалитьНеиспользуемыеПараметры();
	
	//если запрос по временной таблице выполняется быстро - выполним его сразу
	Если ВремяВыполненияВТ <= 1 Тогда		
		ВыполнитьЗапрос();
	КонецЕсли; 
	
	ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.Результат;
	ЭлементыФормы.ПанельРезультата.Страницы.ВременныеТаблицы.Заголовок = "Временные таблицы";
	
	Модифицированность = Истина;

КонецПроцедуры //ОтладитьЗапросВременнойТаблицы

Процедура КоманднаяПанельРезультатВыполнитьАлгоритм(Кнопка)
	
	ТекСтрокаДерева = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	Результат = ПолучитьФорму("ВыполнениеАлгоритма",ЭтаФорма, Новый УникальныйИдентификатор);
	
	Результат.РезультатТаблица = РезультатТаблица.Скопировать();
	Результат.СтрокаДереваЗапросов = ТекСтрокаДерева;
	
	Результат.Открыть();
	
КонецПроцедуры

// <--- РАБОТА С ПАРАМЕТРАМИ                                                                   
////////////////////////////////////////////////////////////////////////// 


//////////////////////////////////////////////////////////////////////////
/// РАБОТА С ВЕРСИЯМИ ЗАПРОСА --->  

//
//
Процедура СохранитьТекущуюВерсиюЗапроса()

	НовСтрока = ВерсииЗапроса.Добавить();
	НовСтрока.ДатаВерсии = ТекущаяДата();
	НовСтрока.ТекстЗапроса = вПолучитьТекстЗапроса(Ложь);
	НовСтрока.Параметры = Параметры.Скопировать();

	мДатаТекущейВерсииЗапроса = НовСтрока.ДатаВерсии;
	
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры //СохранитьТекущуюВерсиюЗапроса

Процедура КнопкаПредыдущаяВерсияНажатие(Элемент)
	
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.Найти(мДатаТекущейВерсииЗапроса,"ДатаВерсии");
	
	Если СтрокаТекВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия);
	
	Если ТекИндекс = 0 Тогда
		//это первая строка
		//предыдущих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс-1]);
	
КонецПроцедуры

Процедура КнопкаСледующаяВерсияНажатие(Элемент)
	
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.Найти(мДатаТекущейВерсииЗапроса,"ДатаВерсии");
	
	Если СтрокаТекВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия);
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс+1]);
	
КонецПроцедуры

Процедура УстановитьВерсиюЗапроса(СтрокаВерсии)

	мДатаТекущейВерсииЗапроса = СтрокаВерсии.ДатаВерсии;
	
	вЗадатьТекстЗапроса(СтрокаВерсии.ТекстЗапроса);
	
	Параметры.Очистить();
	
	Для каждого СтрокаПараметра из СтрокаВерсии.Параметры Цикл
		
		НоваяСтрока = Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПараметра);
		
	КонецЦикла;

	ПоказатьНадписьВерсия("версия " + СокрЛП(мДатаТекущейВерсииЗапроса), 2);
	
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры //УстановитьВерсиюЗапроса

Процедура УстановитьДоступностьКнопокВерсий()

	Если ВерсииЗапроса.Количество()<=1 Тогда
		ЭлементыФормы.КнопкаПредыдущаяВерсия.Видимость = Ложь;
		ЭлементыФормы.КнопкаСледующаяВерсия.Видимость = Ложь;
		ЭлементыФормы.КнопкаСписокВерсий.Видимость = Ложь;
	Иначе	
		ЭлементыФормы.КнопкаПредыдущаяВерсия.Видимость = Истина;
		ЭлементыФормы.КнопкаСледующаяВерсия.Видимость = Истина;
		ЭлементыФормы.КнопкаСписокВерсий.Видимость = Истина;
	КонецЕсли;//  
	
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.Найти(мДатаТекущейВерсииЗапроса,"ДатаВерсии");
	
	Если СтрокаТекВерсия = Неопределено ИЛИ ВерсииЗапроса.Количество() = 0 Тогда
		ЭлементыФормы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
		ЭлементыФормы.КнопкаСледующаяВерсия.Доступность = Ложь;
		Возврат;
	КонецЕсли;//  
	
	ЭлементыФормы.КнопкаПредыдущаяВерсия.Доступность = Истина;
	ЭлементыФормы.КнопкаСледующаяВерсия.Доступность = Истина;
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия);
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		ЭлементыФормы.КнопкаСледующаяВерсия.Доступность = Ложь;
	КонецЕсли;//  

	Если ТекИндекс = 0 Тогда
		//это первая строка
		//предыдущих версий нет
		ЭлементыФормы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
	КонецЕсли;//  
	
КонецПроцедуры //УстановитьДоступностьКнопокВерсий

//
//
Процедура СпрятатьНадписьВерсия()

	ЭлементыФормы.НадписьВерсия.Видимость = Ложь;

КонецПроцедуры //СпрятатьНадписьВерсия

//
//
Процедура ПоказатьНадписьВерсия(ТекстСообщения, ВрямяПоказаСек)

	ЭлементыФормы.НадписьВерсия.Заголовок = ТекстСообщения;
	
	ЭлементыФормы.НадписьВерсия.Видимость = Истина;
	
	ПодключитьОбработчикОжидания("СпрятатьНадписьВерсия",ВрямяПоказаСек,Истина);
	                                                              
КонецПроцедуры //ПоказатьНадписьВерсия

Процедура КнопкаСписокВерсийНажатие(Элемент)
	
	ФормаВерсии = ПолучитьФорму("ВерсииЗапроса");
	
	ФормаВерсии.ВерсииЗапроса = ВерсииЗапроса.Скопировать();
	ФормаВерсии.ДатаТекущейВерсии = мДатаТекущейВерсииЗапроса;
	
	РезультатФормы = ФормаВерсии.ОткрытьМодально();
	
	Если РезультатФормы <> Неопределено Тогда
		
		СтрокаВерсии = ВерсииЗапроса.Найти(РезультатФормы,"ДатаВерсии");
		
		УстановитьВерсиюЗапроса(СтрокаВерсии);
		
	КонецЕсли; 
	
КонецПроцедуры


/// РАБОТА С ВЕРСИЯМИ ЗАПРОСА <---
////////////////////////////////////////////////////////////////////////// 


Процедура КоманднаяПанельПоследниеФайлыОткрытьКаталог(Кнопка)
	
	ТекДанные = ЭлементыФормы.ПоследниеФайлыЗапросов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда Возврат	КонецЕсли;
	
	ЗапуститьПриложение(ТекДанные.Каталог);	
	
КонецПроцедуры
 
Процедура КнопкаДействияСправка(Кнопка)
	
	Справка = ПолучитьФорму("Справка",ЭтаФорма);
	Справка.Открыть();
	
КонецПроцедуры

Процедура КнопкаДействияОткрытьНовыйЗапросник(Кнопка)

	Если обРежимВнешнейОбработки Тогда
		НовОбработка = ВнешниеОбработки.Создать(ЭтотОбъект.ИспользуемоеИмяФайла);
	Иначе	
		НовОбработка = Обработки[Метаданные().Имя].Создать();
	КонецЕсли; 
	
	НовОбработка.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УправлениеДиалогом();
	
	Если обРежимВнешнейОбработки Тогда
		СтрокаДляОтладки = "ВнешниеОбработки.Создать(" + Символ(34) + ЭтотОбъект.ИспользуемоеИмяФайла + Символ(34) + ")" + ".ОтладитьЗапрос(Запрос);";
	Иначе
		СтрокаДляОтладки = "Обработки.Создать(" + Символ(34) + ЭтотОбъект.Метаданные().Имя + Символ(34) + ")" + ".ОтладитьЗапрос(Запрос);";
	КонецЕсли; 
	
	ЭлементыФормы.ПолеHTMLДокументаОтдалкаЗапросаИзМодуля.УстановитьТекст(ПолучитьМакет("ОтладкаЗапросаИзМодуля").ПолучитьТекст());
	
КонецПроцедуры

Процедура СоздатьСтруктуруТаблицыВерсииЗапроса()
	
	ВерсииЗапроса.Колонки.Добавить("ДатаВерсии");
	ВерсииЗапроса.Колонки.Добавить("ТекстЗапроса");
	ВерсииЗапроса.Колонки.Добавить("Параметры");
	
КонецПроцедуры //СоздатьСтруктуруТаблицыВерсииЗапроса

Процедура КнопкаТекстДляОтладкиСкопироватьВБуферНажатие(Элемент)
	
	Окно = ЭлементыФормы.ПолеHTMLДокументаДляБуфераОбмена.Документ.ParentWindow;
	Окно.ClipboardData.SetData("Text", СтрокаДляОтладки);
	
	ЭлементыФормы.КнопкаТекстДляОтладкиСкопироватьВБуфер.Заголовок = "готово";
	
КонецПроцедуры

Процедура КнопкаДействияОтладкаЗапросаВМодуле(Кнопка)
	
	мПанельЦентральноеОкноВидимость = Истина;
	ЭлементыФормы.ПанельСтраницПараметрыВыборки.ТекущаяСтраница = ЭлементыФормы.ПанельСтраницПараметрыВыборки.Страницы.ОтладкаЗапросаВМодуле;
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура КнопкаДействияСайтЗапросника(Кнопка)
	
	ЗапуститьПриложение("https://sites.google.com/site/vtezin/zaprosnik-1s");
	
КонецПроцедуры

Процедура КнопкаОчиститьЗапросНажатие(Элемент)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст("");
	Параметры.Очистить();
	ВерсииЗапроса.Очистить();
	ТаблицаВыборок.Очистить();
	ВременныеТаблицы.Очистить();
	
КонецПроцедуры

Процедура ИмяЗапросаПриИзменении(Элемент)
	
	мТекущаяСтрока.Запрос = ИмяЗапроса;
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоЗапросовСвернутьДерево(Кнопка)
	
	Для каждого СтрокаДерева Из ДеревоЗапросов.Строки Цикл
		
		ЭлементыФормы.ДеревоЗапросов.Свернуть(СтрокаДерева);
		
	КонецЦикла; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
/// СОЗДАНИЕ ТЕКСТОВ ЗАПРОСОВ ПО ГРУППАМ ОБЪЕКТОВ МЕТАДАННЫХ --->                                                

Процедура КонтекстноеМенюТекстаЗапросаВсеДокументы(Кнопка)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ПолучитьТекстЗапросаДляГруппыОбъектовМетаданных("Документы"));
	
КонецПроцедуры

Процедура КонтекстноеМенюТекстаЗапросаВсеСправочники(Кнопка)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ПолучитьТекстЗапросаДляГруппыОбъектовМетаданных("Справочники"));
	
КонецПроцедуры

//создание текста запроса по группе объектов метаданных
//
Функция ПолучитьТекстЗапросаДляГруппыОбъектовМетаданных(ИмяГруппыОбъектов)

	КраткоеИмяГруппы = Лев(ИмяГруппыОбъектов,СтрДлина(ИмяГруппыОбъектов)-1);
	
	ТекстЗапроса = "";
	МДВидыОбъектов = Метаданные[ИмяГруппыОбъектов];
	
	сч = 1;
	
	Для каждого МДВидОбъекта Из МДВидыОбъектов Цикл
		
		Если сч > 1 Тогда
			
			ТекстЗапроса = ТекстЗапроса + Символы.ВК + Символы.ВК + "ОБЪЕДИНИТЬ ВСЕ " + Символы.ВК+ Символы.ВК; 
			
		КонецЕсли; 
		
	    ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ ССЫЛКА, """ + МДВидОбъекта.Имя + """ КАК ВидМетаданных ИЗ " + КраткоеИмяГруппы + "." + МДВидОбъекта.Имя + " КАК " + КраткоеИмяГруппы;  
		
		сч = сч + 1;
		
	КонецЦикла; 
	
	Возврат ТекстЗапроса;

КонецФункции //ПолучитьТекстЗапросаДляГруппыОбъектовМетаданных

// <--- СОЗДАНИЕ ТЕКСТОВ ЗАПРОСОВ ПО ГРУППАМ ОБЪЕКТОВ МЕТАДАННЫХ                                                                   
////////////////////////////////////////////////////////////////////////// 
 

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяФайла = "";
мИмяПути = "";

мЗаголовокФормы = Заголовок;

мТекущаяСтрока = НеОпределено;

мТаблицаЗагружена = Ложь;
мСводнаяТаблицаЗагружена = Ложь;

мТаблицаВыборок = Новый ТаблицаЗначений;

СписокТиповОбходаВыборокЗапроса = Новый СписокЗначений;
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.Прямой,"Прямой");
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.ПоГруппировкам,"ПоГруппировкам");
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"ПоГруппировкамСИерархией");

ЭлементыФормы.ТаблицаВыборок.Колонки.ТипОбхода.ЭлементУправления.СписокВыбора = СписокТиповОбходаВыборокЗапроса;

обMSScriptControl = Новый COMОбъект("MSScriptControl.ScriptControl");
обMSScriptControl.language = "javascript";

мПанельЦентральноеОкноВидимость = Ложь;

мПанельСписокЗапросовСвернутаВлево = Ложь;

мФормаОбновленаПриОткрытии = Ложь;

мФайлЗапросовСохранитьБы = Ложь;

СоздатьСтруктуруТаблицыВерсииЗапроса();
